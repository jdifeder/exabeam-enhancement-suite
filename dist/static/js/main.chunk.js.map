{"version":3,"file":"static/js/main.chunk.js","sources":["C:/Users/johnj/Documents/exabeam-enhancement-suite-react/src/App.css","C:/Users/johnj/Documents/exabeam-enhancement-suite-react/src/index.css","webpack:///./src/App.css?dde5","C:/Users/johnj/Documents/exabeam-enhancement-suite-react/src/App.js","C:/Users/johnj/Documents/exabeam-enhancement-suite-react/src/NewSession.js","webpack:///./src/index.css?bb0a","C:/Users/johnj/Documents/exabeam-enhancement-suite-react/src/index.js","C:/Users/johnj/Documents/exabeam-enhancement-suite-react/src/logo.svg","C:/Users/johnj/Documents/exabeam-enhancement-suite-react/src/reportWebVitals.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".App {\\n  text-align: center;\\n}\\n\\n.App-logo {\\n  height: 40vmin;\\n  pointer-events: none;\\n}\\n\\n@media (prefers-reduced-motion: no-preference) {\\n  .App-logo {\\n    animation: App-logo-spin infinite 20s linear;\\n  }\\n}\\n\\n.App-header {\\n  background-color: #282c34;\\n  min-height: 100vh;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: calc(10px + 2vmin);\\n  color: white;\\n}\\n\\n.App-link {\\n  color: #61dafb;\\n}\\n\\n@keyframes App-logo-spin {\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(360deg);\\n  }\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://src/App.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,oBAAoB;AACtB;;AAEA;EACE;IACE,4CAA4C;EAC9C;AACF;;AAEA;EACE,yBAAyB;EACzB,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,6BAA6B;EAC7B,YAAY;AACd;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE;IACE,uBAAuB;EACzB;EACA;IACE,yBAAyB;EAC3B;AACF\",\"sourcesContent\":[\".App {\\n  text-align: center;\\n}\\n\\n.App-logo {\\n  height: 40vmin;\\n  pointer-events: none;\\n}\\n\\n@media (prefers-reduced-motion: no-preference) {\\n  .App-logo {\\n    animation: App-logo-spin infinite 20s linear;\\n  }\\n}\\n\\n.App-header {\\n  background-color: #282c34;\\n  min-height: 100vh;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: calc(10px + 2vmin);\\n  color: white;\\n}\\n\\n.App-link {\\n  color: #61dafb;\\n}\\n\\n@keyframes App-logo-spin {\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(360deg);\\n  }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://src/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb\",\"sourcesContent\":[\"body {\\n  margin: 0;\\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n\\ncode {\\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\\n    monospace;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-4-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-4-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\",\n      function () {\n        content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-4-1!../node_modules/postcss-loader/src/index.js??postcss!./App.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","import React, { useState, useEffect, useRef } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { Column } from 'primereact/column';\nimport { InputText } from 'primereact/inputtext';\nimport { TreeTable } from 'primereact/treetable';\nimport { ProgressBar } from 'primereact/progressbar';\nimport { Toast } from 'primereact/toast';\nimport { Listbox } from 'primereact/listbox';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/*global chrome*/\r\nimport React from 'react';\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Button } from 'primereact/button';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Column } from 'primereact/column';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { TreeTable } from 'primereact/treetable';\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { Toast } from 'primereact/toast';\r\nimport { Listbox } from 'primereact/listbox';\r\nimport Dexie from 'dexie';\r\nimport * as moment from 'moment';\r\nimport axios from 'axios';\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport 'primereact/resources/themes/saga-blue/theme.css';\r\nimport 'primereact/resources/primereact.min.css';\r\nimport 'primeicons/primeicons.css';\r\n\r\nclass NewSession {\r\n    showHome = true;\r\n    showLogin = false;\r\n    showTuning = false;\r\n    showEvents = false;\r\n    showValidation = false;\r\n    onPreviousSession = false;\r\n    showpRuleTuning = false;\r\n    showpDataValidation = false;\r\n    refresh = true;\r\n    bannedEvents = [];\r\n    summary = {};\r\n    errors = [];\r\n    rawEventErrors = 0;\r\n    errorVisible = false;\r\n    \r\n    host = '';\r\n    nodeServer = 'https://exabeam.azurewebsites.net/api/exabeam-cloud';\r\n    username = '';\r\n    password = '';\r\n    queryUnit = 'd';\r\n    queryUnitNum = '7';\r\n    queryRiskScore = '90';\r\n    queryLimit = '10000';\r\n\r\n    allowedCount = 5;\r\n    allowedEventTypeCount = 2;\r\n    allowedEventsPerSession = 5;\r\n    allowedEventTypeSessionCount = 0;\r\n    allowedEventDetailCount = 5;\r\n    allowedRawEventCount = 0;\r\n    doneCount = 0;\r\n    doneCountTimelines = 0;\r\n    doneCountModels = 0;\r\n    doneCountRules = 0;\r\n    doneEventTypes = [];\r\n    doneEventTypeSessions = [];\r\n    doneEventTypeAssets = [];\r\n    doneEventTypeSessionsDetails = [];\r\n    doneEventTypeAssetsDetails = [];\r\n    doneRawEvents = [];\r\n    doneCountEventTypes = 0;\r\n    doneCountEventTypeSessions = 0;\r\n    doneCountEventTypeAssets = 0;\r\n    doneCountEventTypeSessionsDetails = 0;\r\n    doneCountEventTypeAssetsDetails = 0;\r\n    doneCountEvents = 0;\r\n    doneCountSessions = 0;\r\n    todoRawEventsCount = 0;\r\n    doneRawEventsCount = 0;\r\n    validDoneRawEventsCount = 0;\r\n    retryAttemptRawEventsCount = 0;\r\n    trueOrFalse = [\r\n      { label: 'True', value: 'true' },\r\n      { label: 'False', value: 'false' }\r\n    ];\r\n    trueOrFalseOrNA = [\r\n      { label: 'True', value: 'true' },\r\n      { label: 'False', value: 'false' },\r\n      { label: 'N/A', value: 'N/A' }\r\n    ];\r\n\r\n    activeEventTypes = 0;\r\n    activeEventTypeSessions = 0;\r\n    activeEventTypeAssets = 0;\r\n    activeRawEvents = 0;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    \r\n    this.summary.uniqueUsers = [];\r\n    this.summary.uniqueHosts = [];\r\n    this.summary.uniqueIPs = [];\r\n    this.summary.uniqueUserCount = 0;\r\n    this.summary.uniqueHostCount = 0;\r\n    this.summary.uniqueIPsCount = 0;\r\n    this.getTab();\r\n\r\n  }\r\n\r\n  getTab() {\r\n    chrome.tabs.query({ active: true, currentWindow: true }, ([{ id, url }]) => {\r\n      console.log('url = ', url);\r\n      console.log('id = ', id);\r\n      this.setState({tabID: id});\r\n      this.tabID = id;\r\n      this.setState({host: url.split('https://')[1].substr(0,url.split('https://')[1].indexOf('/'))});\r\n      this.host = url.split('https://')[1].substr(0,url.split('https://')[1].indexOf('/'));\r\n      console.log('this.host = ',this.host);\r\n      this.getDB();\r\n    })\r\n  }\r\n\r\n  sleep(milliseconds) {\r\n    const date = Date.now();\r\n    let currentDate = null;\r\n    do {\r\n      currentDate = Date.now();\r\n    } while (currentDate - date < milliseconds);\r\n  }\r\n\r\n  async getDB() {\r\n    this.dbName = 'exabeamEnhancementSuite'+'-'+this.host;\r\n    this.ruleTuningDb = 'ruleTuning';\r\n    this.dataValidationDb = 'dataValidation';\r\n    this.tableNames = [];\r\n    this.dbStores = {};\r\n    this.tableNames.push(this.ruleTuningDb);\r\n    this.tableNames.push(this.dataValidationDb);\r\n    this.tableNames.forEach((tableName) => {\r\n      this.dbStores[tableName] = '++id,date,type'; // where schema is a string containing the primary key name + \",\" + a comma-delimited list of indexes.\r\n    });\r\n    var db = new Dexie(this.dbName);\r\n    db.version(1).stores(this.dbStores);\r\n    console.log('this.ruleTuningDb = ',this.ruleTuningDb);\r\n    this.previousRuleTuning = await db.table(this.ruleTuningDb).toArray();\r\n    this.previousDataValidation = await db.table(this.dataValidationDb).toArray();\r\n    if(this.previousRuleTuning.length !== 0) this.showpRuleTuning = true;\r\n    if(this.previousDataValidation.length !== 0) this.showpDataValidation = true;\r\n    this.previousRuleTuning.forEach((obj) => {\r\n      obj.epochDate = obj.date;\r\n      obj.date = moment(obj.date).format('lll');\r\n      if(obj.type === 'session') obj.type = 'user';\r\n    });\r\n    this.previousDataValidation.forEach((obj) => {\r\n      obj.epochDate = obj.date;\r\n      obj.date = moment(obj.date).format('lll');\r\n    });\r\n    \r\n    console.log('this.previousRuleTuning = ', this.previousRuleTuning);\r\n    console.log('this.previousDataValidation = ', this.previousDataValidation);\r\n    this.pRuleTuningColumns = [\r\n      { field: 'date', header: 'Date Run' },\r\n      { field: 'daysQueried', header: 'Days Queried' },\r\n      { field: 'riskScore', header: 'Min Risk Score' },\r\n      { field: 'type', header: 'Session Type' },\r\n      { field: 'uSessionSummaryRiskScore', header: 'Session Scores' },\r\n      { field: 'uSessionSummarySessionCount', header: 'Session Count' },\r\n      { field: 'uSessionSummaryNotableCount', header: 'Notable Count' },\r\n      { field: 'uSessionSummaryNotablePerDay', header: 'Notable Per Day (Average)' }\r\n    ];\r\n    this.pRuleTuningSettings = {\r\n      columns: {\r\n        date: { title: 'Date Run' },\r\n        daysQueried: { title: 'Days Queried' },\r\n        riskScore: { title: 'Min Risk Score' },\r\n        type: { title: 'Session Type' },\r\n        uSessionSummaryRiskScore: { title: 'Session Scores' },\r\n        uSessionSummarySessionCount: { title: 'Session Count' },\r\n        uSessionSummaryNotableCount: { title: 'Notable Count' },\r\n        uSessionSummaryNotablePerDay: { title: 'Notable Per Day (Average)' }\r\n      }\r\n    }\r\n    this.pDataValidationColumns = [\r\n      { field: 'date', header: 'Date Run' },\r\n      { field: 'daysQueried', header: 'Days Queried' }\r\n    ]\r\n  }\r\n\r\n  getNotables(type) {\r\n    this.arrayType = type;\r\n    this.showLogin = false;\r\n    this.showHome = false;\r\n    this.loading = true;\r\n    this.showTuning = true;\r\n    //Threat Hunter query for all sessions that with risk score >= 90 over 7 days\r\n    chrome.tabs.sendMessage(this.tabID, {message: \"notableSearch\", queryUnit: this.queryUnit, queryUnitNum: this.queryUnitNum, queryRiskScore: this.queryRiskScore, queryLimit: this.queryLimit}, (response) => {\r\n      console.log('noatble response = ',response);\r\n      this.thResults = response;\r\n      this.fixArray();\r\n    });\r\n  }\r\n\r\n  fixArray(){\r\n    console.log('fixArray() running');\r\n    console.log('this.arrayType = ',this.arrayType);\r\n    this.forEachBreak = false;\r\n    this.counter = 0;\r\n    this.thResultsUsers = {};\r\n    this.thResultsUsers.sessions = [];\r\n    this.thResultsUsers.userCounts = [];\r\n    this.thResultsUsers.ruleCounts = [];\r\n    this.thResultsAssets = {};\r\n    this.thResultsAssets.sessions = [];\r\n    this.thResultsAssets.userCounts = [];\r\n    this.thResultsAssets.ruleCounts = [];\r\n    this.doneCountSessions = 0;\r\n    this.doneCountTimelines = 0;\r\n    //Grab all the session IDs from the TH query and put them in a new array\r\n    if(this.arrayType === 'asset' && typeof this.thResults.entities.asset !== 'undefined') {\r\n      for (this.index = 0; this.index < this.thResults.entities.asset.length; this.index++) { \r\n        this.thResultsUsers.sessions[this.index] = {}\r\n        this.thResultsUsers.sessions[this.index].id = this.thResults.entities.asset[this.index].assetSequenceInfo.assetSequenceId;\r\n        this.thResultsUsers.sessions[this.index].user = this.thResults.entities.asset[this.index].assetSequenceInfo.assetId;\r\n        this.thResultsUsers.sessions[this.index].riskScore = this.thResults.entities.asset[this.index].assetSequenceInfo.riskScore;  \r\n      }\r\n      this.getSequences(0);\r\n    }\r\n    if(this.arrayType === 'session' && typeof this.thResults.entities.session !== 'undefined') {\r\n      for (this.index = 0; this.index < this.thResults.entities.session.length; this.index++) { \r\n        this.thResultsUsers.sessions[this.index] = {}\r\n        this.thResultsUsers.sessions[this.index].id = this.thResults.entities.session[this.index].sessionInfo.sessionId;\r\n        this.thResultsUsers.sessions[this.index].user = this.thResults.entities.session[this.index].sessionInfo.username;\r\n        this.thResultsUsers.sessions[this.index].riskScore = this.thResults.entities.session[this.index].sessionInfo.riskScore;  \r\n      }\r\n      this.getSessions(0);\r\n    }\r\n      \r\n    //Take all of those session IDs and get all the triggered rules and their underlying events, add them to the array\r\n  }\r\n\r\n  getSessions(offset) {\r\n    this.visibleTuningProgress = true;\r\n    var counter = 0;\r\n    if(offset != 0) {\r\n      var tempIndex = offset * this.allowedCount;\r\n    } else {\r\n      var tempIndex = 0;\r\n    }\r\n    var maxIndex = tempIndex + this.allowedCount;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    this.thResultsUsers.sessions.forEach((obj, index) => {\r\n      tempKeys.push(obj.id);\r\n    })\r\n    for (var a=tempIndex; a < maxIndex; a++) {\r\n      tempArray.push(tempKeys[a]);\r\n    }\r\n    this.todoTimelines = tempKeys.length;\r\n    //Start loop of fetch\r\n    tempArray.forEach((obj,index) => {\r\n      if(obj != undefined) {\r\n        axios('https://'+this.host+'/uba/api/user/sequence/triggeredRules?sequenceType=session&sequenceId='+obj, {\r\n          method: 'GET',\r\n          withCredentials: 'include',\r\n        }).then(response => {\r\n          //console.log('got response of timeline and it is = ',response);\r\n          this.thResultsUsers.sessions.forEach((obj2, index2) => {\r\n            //console.log('obj(',obj,') && obj2.id(',obj2.id,')');\r\n            if(obj === obj2.id) {\r\n              //console.log('matches!')\r\n              obj2.rules = response.data;\r\n              //console.log('counter BEFORE = ', counter);\r\n              counter = counter + 1;\r\n              //console.log('counter AFTER = ', counter);\r\n              this.doneCountSessions = this.doneCountSessions + 1;\r\n              //console.log('this.doneCountTimelines BEFORE = ', this.doneCountTimelines);\r\n              this.doneCountTimelines++;\r\n              //console.log('this.doneCountTimelines AFTER = ', this.doneCountTimelines);\r\n              this.tuningProgress = Math.round(((this.doneCountTimelines/this.todoTimelines) * 100));\r\n              \r\n              if(counter < this.allowedCount) {\r\n              //  console.log('Index = '+b+' this.activeCount LESSER this.allowedCount');\r\n              } else {\r\n              //  console.log('Index = '+b+' this.activeCount GREATER this.allowedCount');\r\n                if(this.doneCountSessions <= tempKeys.length) this.getSessions(offset+1);\r\n              }\r\n              if(this.doneCountSessions === tempKeys.length) {\r\n                \r\n                this.arraySum(this.thResultsUsers);\r\n         } \r\n            }\r\n          })\r\n        //  console.log(response);\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      } \r\n    })\r\n      \r\n  }\r\n\r\n  getSequences(offset) {\r\n    this.visibleTuningProgress = true;\r\n    var counter = 0;\r\n    if(offset != 0) {\r\n      var tempIndex = offset * this.allowedCount;\r\n    } else {\r\n      var tempIndex = 0;\r\n    }\r\n    var maxIndex = tempIndex + this.allowedCount;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    this.thResultsUsers.sessions.forEach((obj, index) => {\r\n      tempKeys.push(obj.id);\r\n    })\r\n    for (var a=tempIndex; a < maxIndex; a++) {\r\n      tempArray.push(tempKeys[a]);\r\n    }\r\n    this.todoTimelines = tempKeys.length;\r\n    //Start loop of fetch\r\n    tempArray.forEach((obj,index) => {\r\n      if(obj != undefined) {\r\n        axios('https://'+this.host+'/uba/api/asset/sequence/'+obj+'/triggeredRules', {\r\n          method: 'GET',\r\n          withCredentials: 'include',\r\n        }).then(response => {\r\n          this.thResultsUsers.sessions.forEach((obj2, index2) => {\r\n            if(obj === obj2.id) {\r\n              obj2.rules = response.data;\r\n              counter = counter + 1;\r\n              this.doneCountSessions = this.doneCountSessions + 1;\r\n              this.doneCountTimelines++;\r\n              this.tuningProgress = Math.round(((this.doneCountTimelines/this.todoTimelines) * 100));\r\n              if(counter < this.allowedCount) {\r\n              //  console.log('Index = '+b+' this.activeCount LESSER this.allowedCount');\r\n              } else {\r\n              //  console.log('Index = '+b+' this.activeCount GREATER this.allowedCount');\r\n                if(this.doneCountSessions <= tempKeys.length) this.getSequences(offset+1);\r\n              }\r\n              if(this.doneCountSessions === tempKeys.length) {\r\n                \r\n                \r\n                this.arraySum(this.thResultsUsers);\r\n              } \r\n            }\r\n          })\r\n          \r\n        //  console.log(response);\r\n        }).catch(error => {\r\n          console.log(error);\r\n        });\r\n      }\r\n      \r\n    })\r\n      \r\n  }\r\n\r\n  arraySum(sessionData){\r\n    //Setup array to count what users have triggered sessions and their total scores\r\n    //console.log('about to start');\r\n    sessionData.sessions.forEach((obj, index) => {\r\n      //console.log('in my new loop on index '+index);\r\n      if(sessionData.userCounts.some(username => username.user === sessionData.sessions[index].user)) {\r\n      //  console.log( \"Object found inside the array.\");\r\n      } else{\r\n      //  console.log(\"Object not found.\");\r\n      //  console.log('pushing '+sessionData.sessions[index].user);\r\n        sessionData.userCounts.push({'user': sessionData.sessions[index].user, 'count': 0, 'totalScore':0})\r\n      }\r\n       \r\n    })\r\n    //Add up the amount of times a user was seen and sum up the total risk score of those sessions\r\n    for (var i=0; i < sessionData.sessions.length; i++) {\r\n      for (var b=0; b < sessionData.userCounts.length; b++) {\r\n        if (sessionData.sessions[i].user === sessionData.userCounts[b].user) {\r\n          sessionData.userCounts[b].count = sessionData.userCounts[b].count + 1;\r\n          sessionData.userCounts[b].totalScore = sessionData.userCounts[b].totalScore + sessionData.sessions[i].riskScore;\r\n        }\r\n      }     \r\n    }\r\n    //Sum up user session info\r\n    this.uSessionSummaryNotableCount = 0;\r\n    this.uSessionSummaryRiskScore = 0;\r\n    this.uSessionSummaryCount = sessionData.sessions.length;\r\n    for (var i=0; i < sessionData.sessions.length; i++) {\r\n      if(sessionData.sessions[i].riskScore >= 90) this.uSessionSummaryNotableCount = this.uSessionSummaryNotableCount + 1\r\n      this.uSessionSummaryRiskScore = this.uSessionSummaryRiskScore + sessionData.sessions[i].riskScore;\r\n    }\r\n    this.uSessionSummaryNotablePerDay = Math.round(this.uSessionSummaryNotableCount / this.queryUnitNum );\r\n    this.uSessionSummarySessionCount = sessionData.sessions.length;\r\n\r\n    //Setup array to count what rules have triggered and their total scores\r\n    //console.log('about to start rules');\r\n    sessionData.sessions.forEach((obj, index) => {\r\n      sessionData.sessions[index].rules.triggeredRules.forEach((obj2, index2) => {\r\n        sessionData.sessions[index].rules.triggeredRules[index2].ruleName = sessionData.sessions[index].rules.rules[sessionData.sessions[index].rules.triggeredRules[index2].ruleId].ruleName;\r\n        if(sessionData.ruleCounts.some(ruleName => ruleName.rule === sessionData.sessions[index].rules.triggeredRules[index2].ruleId)) {\r\n       //   console.log( sessionData.sessions[index].rules.triggeredRules[index2].ruleId +\" found inside the array.\");\r\n        } else{    \r\n          //console.log(sessionData.sessions[index].rules.triggeredRules[index2].ruleId+\" not found.\");\r\n        //  console.log('index = '+index);\r\n         // console.log('index2 = '+index2);\r\n          sessionData.ruleCounts.push({'rule': sessionData.sessions[index].rules.triggeredRules[index2].ruleId, 'ruleName': sessionData.sessions[index].rules.triggeredRules[index2].ruleName, 'count': 0, 'sessionCount': 0, 'originalSessionCount': 0, 'totalScore':0, 'ruleDef': sessionData.sessions[index].rules.rules[sessionData.sessions[index].rules.triggeredRules[index2].ruleId]});\r\n        }\r\n      }) \r\n    })\r\n    //Add empty array of events under each triggered rule\r\n    for (var b=0; b < sessionData.ruleCounts.length; b++) {\r\n      sessionData.ruleCounts[b].events = [];\r\n    }\r\n    //Fill in event details for each event triggered under a rule\r\n    sessionData.sessions.forEach((obj, index) => {\r\n      sessionData.sessions[index].rules.triggeredRules.forEach((obj2, index2) => {\r\n        sessionData.ruleCounts.forEach((obj3, index3) => {\r\n          if(sessionData.sessions[index].rules.triggeredRules[index2].ruleId === sessionData.ruleCounts[index3].rule) {\r\n            if(sessionData.ruleCounts[index3].events.some(eventObject => eventObject.eventId === sessionData.sessions[index].rules.triggeredRules[index2].eventId)) {\r\n            //  console.log( sessionData.sessions[index].rules.triggeredRules[index2].eventId +\" found inside the array.\");\r\n            } else{    \r\n           //   console.log(sessionData.sessions[index].rules.triggeredRules[index2].eventId+\" not found.\");\r\n              Object.keys(sessionData.sessions[index].rules.triggeredRuleEvents).forEach((obj4, index4) => {\r\n                if(obj4 === sessionData.sessions[index].rules.triggeredRules[index2].eventId){\r\n                  if(sessionData.sessions[index].rules.triggeredRuleEvents[obj4].fields['riskScore-'+sessionData.sessions[index].rules.triggeredRules[index2].ruleId] == undefined) sessionData.sessions[index].rules.triggeredRuleEvents[obj4].fields['riskScore-'+sessionData.sessions[index].rules.triggeredRules[index2].ruleId] = 0;\r\n                  sessionData.sessions[index].rules.triggeredRuleEvents[obj4].fields['riskScore-'+sessionData.sessions[index].rules.triggeredRules[index2].ruleId] = sessionData.sessions[index].rules.triggeredRuleEvents[obj4].fields['riskScore-'+sessionData.sessions[index].rules.triggeredRules[index2].ruleId] + Math.round(sessionData.sessions[index].rules.triggeredRules[index2].riskScore);\r\n                  sessionData.ruleCounts[index3].events.push(sessionData.sessions[index].rules.triggeredRuleEvents[\"\"+obj4].fields);\r\n                }\r\n              })\r\n            }\r\n          }     \r\n        })\r\n      })\r\n    })\r\n    //Add up the amount of times a rule was seen and sum up the total risk score of those rules\r\n    for (var i=0; i < sessionData.sessions.length; i++) {\r\n      for (var a=0; a < sessionData.sessions[i].rules.triggeredRules.length; a++) {\r\n        for (var b=0; b < sessionData.ruleCounts.length; b++) { \r\n          if (sessionData.sessions[i].rules.triggeredRules[a].ruleId === sessionData.ruleCounts[b].rule) {\r\n            sessionData.ruleCounts[b].originalCount = sessionData.ruleCounts[b].count + 1;\r\n            sessionData.ruleCounts[b].count = sessionData.ruleCounts[b].count + 1; \r\n            sessionData.ruleCounts[b].originalTotalScore = sessionData.ruleCounts[b].totalScore + Math.round(sessionData.sessions[i].rules.triggeredRules[a].riskScore);         \r\n            sessionData.ruleCounts[b].totalScore = sessionData.ruleCounts[b].totalScore + Math.round(sessionData.sessions[i].rules.triggeredRules[a].riskScore);\r\n            if(this.uSessionSummaryTunedRiskScore) {\r\n              sessionData.ruleCounts[b].totalScorePercent = Math.round(((sessionData.ruleCounts[b].totalScore / this.uSessionSummaryTunedRiskScore))*100);\r\n            } else {\r\n              sessionData.ruleCounts[b].totalScorePercent = Math.round(((sessionData.ruleCounts[b].totalScore / this.uSessionSummaryRiskScore))*100);\r\n            }\r\n                                           \r\n          }\r\n        }\r\n      }     \r\n    }\r\n\r\n    for (var b=0; b < sessionData.ruleCounts.length; b++) {\r\n      for (var i=0; i < sessionData.sessions.length; i++) {\r\n        if(sessionData.sessions[i].rules.triggeredRules.some(rule => rule.ruleId === sessionData.ruleCounts[b].rule)) {\r\n          sessionData.ruleCounts[b].originalSessionCount = sessionData.ruleCounts[b].originalSessionCount + 1;\r\n          sessionData.ruleCounts[b].sessionCount = sessionData.ruleCounts[b].sessionCount + 1;\r\n          if(this.uSessionSummaryTunedRiskScore) {\r\n            sessionData.ruleCounts[b].sessionCountPercent = Math.round(((sessionData.ruleCounts[b].sessionCount / this.uSessionSummaryTunedNotablePerDay))*100);\r\n          } else{\r\n            sessionData.ruleCounts[b].sessionCountPercent = Math.round(((sessionData.ruleCounts[b].sessionCount / this.uSessionSummarySessionCount))*100);\r\n          }\r\n          \r\n        }\r\n      }     \r\n    }\r\n\r\n    if(!this.onPreviousSession) this.storeTuningSession();\r\n    this.setTuningData(sessionData.userCounts, sessionData.ruleCounts)\r\n\r\n  }\r\n\r\n  setTuningData(userCounts, ruleCounts) {\r\n    this.userData = userCounts;\r\n    this.ruleData = ruleCounts;\r\n    this.ruleTuning = [];\r\n    this.bannedEvents = [];\r\n    this.loading = false;\r\n    this.visibleTuningProgress = false;\r\n\r\n    this.columns1 = [\r\n      { field: 'user', header: 'User' },\r\n      { field: 'count', header: 'Session Count' },\r\n      { field: 'totalScore', header: 'Total Score' }\r\n    ];\r\n\r\n    this.columns2 = [\r\n      { field: 'rule', header: 'Rule ID' },\r\n      { field: 'ruleName', header: 'Rule Name' },\r\n      { field: 'count', header: 'Rule Count' },\r\n      { field: 'sessionCount', header: 'Session Count' },\r\n      { field: 'totalScore', header: 'Total Score' }\r\n    ];\r\n\r\n    this.columns4 = [\r\n      { field: 'fieldName', header: 'Field Name' },\r\n      { field: 'fieldValue', header: 'Value' },\r\n      { field: 'count', header: 'Event Count' },\r\n      { field: 'sessionCount', header: 'Session Count' },\r\n      { field: 'totalScore', header: 'Total Score' }\r\n    ];\r\n\r\n    this.columns5 = [\r\n      { field: 'name', header: 'Name' },\r\n      { field: 'value', header: 'Value' },\r\n      { field: 'count', header: 'Rule Count' },\r\n      { field: 'score', header: 'Score' }\r\n    ];\r\n    \r\n    this.showTuning = false;\r\n    this.showTuning = true;\r\n    this.loading = true;\r\n    this.loading = false;\r\n    \r\n  }\r\n\r\n  async storeTuningSession() {\r\n    var db = new Dexie(this.dbName);\r\n    db.version(1).stores(this.dbStores);\r\n    await db.table(this.ruleTuningDb).add({\r\n      date: Date.now(),\r\n      type: this.arrayType,\r\n      daysQueried: this.queryUnitNum,\r\n      riskScore: this.queryRiskScore,\r\n      sessionData: this.thResultsUsers,\r\n      uSessionSummaryRiskScore: this.uSessionSummaryRiskScore,\r\n      uSessionSummarySessionCount: this.uSessionSummarySessionCount,\r\n      uSessionSummaryNotableCount: this.uSessionSummaryNotableCount,\r\n      uSessionSummaryNotablePerDay: this.uSessionSummaryNotablePerDay\r\n    });\r\n    console.log('just inserted and now this.db.ruleTuning.toArray() = ', await db.table(this.ruleTuningDb).toArray());\r\n  }\r\n\r\n  async storeValidationSession() {\r\n    var db = new Dexie(this.dbName);\r\n    db.version(1).stores(this.dbStores);\r\n    if(this.onPreviousSession) {\r\n      await db.table(this.dataValidationDb).put({\r\n        id: this.selectedSession.id,\r\n        date: this.selectedSession.epochDate,\r\n        daysQueried: this.selectedSession.daysQueried, \r\n        rulesAndModels: this.rulesAndModels,\r\n        eventTypes: this.eventTypes,\r\n        summary: this.summary,\r\n        sources: this.sources\r\n      });\r\n    } else {\r\n      await db.table(this.dataValidationDb).add({\r\n        date: Date.now(),\r\n        daysQueried: this.queryUnitNum,\r\n        rulesAndModels: this.rulesAndModels,\r\n        eventTypes: this.eventTypes,\r\n        summary: this.summary,\r\n        sources: this.sources\r\n      });\r\n    }\r\n    \r\n    console.log('just inserted and now this.db.dataValidation.toArray() = ', await db.table(this.dataValidationDb).toArray());\r\n  }\r\n\r\n  async delTuningSession(id) {\r\n    var db = new Dexie(this.dbName);\r\n    db.version(1).stores(this.dbStores);\r\n    await db.table(this.ruleTuningDb).delete(id);\r\n    this.getDB();\r\n  }\r\n\r\n  async delDataValidation(id) {\r\n    var db = new Dexie(this.dbName);\r\n    db.version(1).stores(this.dbStores);\r\n    await db.table(this.dataValidationDb).delete(id);\r\n    this.getDB();\r\n  }\r\n\r\n  onSessionSelect(event) {\r\n    this.onPreviousSession = true;\r\n    this.selectedSession = event.sessionData;\r\n    this.thResultsUsers = event.sessionData;\r\n    this.uSessionSummaryRiskScore = event.uSessionSummaryRiskScore;\r\n    this.uSessionSummarySessionCount = event.uSessionSummarySessionCount;\r\n    this.uSessionSummaryNotableCount = event.uSessionSummaryNotableCount;\r\n    this.uSessionSummaryNotablePerDay = event.uSessionSummaryNotablePerDay;\r\n    this.showHome = false;\r\n    this.showTuning = true;\r\n    this.setTuningData(this.selectedSession.userCounts, this.selectedSession.ruleCounts);\r\n    \r\n  }\r\n\r\n  onDvSessionSelect(event) {\r\n    this.onPreviousSession = true;\r\n    this.selectedSession = event;\r\n    this.rulesAndModels = event.rulesAndModels;\r\n    this.rulesAndModelsDone = event.rulesAndModels;\r\n    this.eventTypes = event.eventTypes;\r\n    this.summary = event.summary;\r\n    this.showHome = false;\r\n    this.showValidation = true;\r\n    this.getRawEvents(0,0)\r\n    //this.findRequiredData(this.rulesAndModels);\r\n    \r\n  }\r\n\r\n  delPreviousRuleTuning(session) {\r\n    console.log('selected data to delete = ', session);\r\n    this.delTuningSession(session.id);\r\n  }\r\n\r\n  delPreviousDataValidation(session) {\r\n    console.log('selected data to delete = ', session);\r\n    this.delDataValidation(session.id);\r\n  }\r\n\r\n  onSourceSelect(event) {\r\n    this.visibleSelectedSource = true;\r\n    this.selectedSourceSessionEvents = [];\r\n    this.selectedSourceAssetEvents = [];\r\n    event.sessionEvents.forEach((obj) => {\r\n      this.selectedSourceSessionEvents.push(obj);\r\n    })\r\n    event.assetEvents.forEach((obj) => {\r\n      this.selectedSourceAssetEvents.push(obj);\r\n    })\r\n    \r\n    //const test1 = prettyPrintJson.prettyPrintJson.toHtml(this.selectedSourceSessionEvents);\r\n    //const test2 = prettyPrintJson.prettyPrintJson.toHtml(this.selectedSourceAssetEvents);\r\n    //$( \"#selectedSourceSessionEvents\" ).html(this.selectedSourceSessionEvents);\r\n    //$( \"#selectedSourceAssetEvents\" ).html(this.selectedSourceAssetEvents);\r\n\r\n  }\r\n\r\n  onRowSelect(event) {\r\n    this.selectedRule = event.data.rule;\r\n    this.selectedRuleCount = event.data.count;\r\n    this.selectedRuleScore = event.data.totalScore;\r\n    this.selectedRuleSessionCount = event.data.sessionCount;\r\n    console.log('selected rule = ', event.data.rule);\r\n    this.setEvents(event.data.rule);\r\n    this.showEvents = true;\r\n    \r\n  }\r\n\r\n  toggleShowEvents() {\r\n    this.showEvents = false;\r\n    this.showTuning = true;\r\n     \r\n  }\r\n\r\n  toggleShowHome() {\r\n    this.uSessionSummaryTunedRiskScore = null;\r\n    this.uSessionSummaryTunedNotableCount = null;\r\n    this.uSessionSummaryTunedNotablePerDay = null;\r\n    this.uSessionSummaryTunedRiskScorePercent = null;\r\n    this.uSessionSummaryTunedNotableCountPercent = null;\r\n    this.uSessionSummaryTunedNotablePerDayPercent = null;\r\n\r\n    this.allRules = null;\r\n    this.allModels = null; \r\n    this.summary = {};\r\n    this.summary.uniqueUsers = [];\r\n    this.summary.uniqueHosts = [];\r\n    this.summary.uniqueIPs = [];\r\n    this.summary.uniqueUserCount = 0;\r\n    this.summary.uniqueHostCount = 0;\r\n    this.summary.uniqueIPsCount = 0;\r\n    this.sources = [];\r\n    this.userData = [];\r\n    this.ruleData = [];\r\n    this.doneEventTypes = [];\r\n    this.doneEventTypeSessions = [];\r\n    this.doneEventTypeAssets = [];\r\n    this.doneEventTypeSessionsDetails = [];\r\n    this.doneEventTypeAssetsDetails = [];\r\n    this.doneRawEvents = [];\r\n\r\n    this.todoRawEventsCount = 0;\r\n    this.doneRawEventsCount = 0;\r\n    this.validDoneRawEventsCount = 0;\r\n    this.retryAttemptRawEventsCount = 0;\r\n\r\n    this.getDB();\r\n    this.showTuning = false;\r\n    this.showValidation = false;\r\n    this.onPreviousSession = false;\r\n    this.showpRuleTuning = true;\r\n    this.showHome = true;\r\n  }\r\n\r\n  setEvents(ruleName) {\r\n    this.tempCount = 0;\r\n    this.showTuning = false;\r\n    this.showEvents = true;\r\n    this.columns3 = [];\r\n    this.eventData = [];\r\n    this.eventSummaryData = [];\r\n    for (var i=0; i < this.thResultsUsers.ruleCounts.length; i++) {\r\n      if(this.thResultsUsers.ruleCounts[i].rule === ruleName){\r\n        this.eventData = this.thResultsUsers.ruleCounts[i].events;\r\n        this.eventData.forEach((obj, index) => {\r\n          Object.keys(obj).forEach((obj2, index2) => {\r\n            if(obj2 != 'time' && obj2 != 'rawlog_time' && obj2 != 'session_order' && obj2 != 'event_id' && obj2 != 'alert_id' && obj2 != 'riskScore' && obj2 != 'is_session_last' && obj2.substring(0,obj2.indexOf('-')) != 'riskScore' && obj[obj2] != ''){\r\n              if(this.eventSummaryData.some(theEvent => theEvent.fieldName === obj2 && theEvent.fieldValue === obj[obj2])) {\r\n              } else{\r\n                this.eventSummaryData.push({'fieldName': obj2, 'fieldValue': obj[obj2], 'count': 0, 'totalScore': 0, 'sessionCount': 0, 'sessionIds':[]});\r\n              }\r\n              if(this.columns3.some(eventObject => eventObject.field === obj2)) {\r\n              } else{\r\n                this.columns3.push({'field': obj2, 'header': obj2})\r\n              }\r\n            }\r\n            \r\n          })\r\n        })\r\n      } \r\n    }\r\n    for (var i=0; i < this.eventData.length; i++) {\r\n      Object.keys(this.eventData[i]).forEach((obj2, index2) => {\r\n        for (var b=0; b < this.eventSummaryData.length; b++) {\r\n          if(this.eventSummaryData[b].fieldName === obj2 && this.eventSummaryData[b].fieldValue === this.eventData[i][obj2] && this.eventData[i]['riskScore-'+this.selectedRule]) {\r\n            if(this.bannedEvents.some(theEvent => theEvent.event_id === this.eventData[i].event_id)) {\r\n              this.bannedEvents.forEach((obj3, index3) => {\r\n                if(obj3.event_id === this.eventData[i].event_id){\r\n                  if(obj3.rules.some(theRule => theRule === ruleName)){           \r\n                  } else {\r\n                    this.eventSummaryData[b].count = this.eventSummaryData[b].count + 1;\r\n                    this.eventSummaryData[b].totalScore = this.eventSummaryData[b].totalScore + this.eventData[i]['riskScore-'+this.selectedRule];\r\n                    this.eventSummaryData[b].eventCountPercent = Math.round(((this.eventSummaryData[b].count / this.selectedRuleCount))*100);\r\n                    this.eventSummaryData[b].scoreCountPercent = Math.round(((this.eventSummaryData[b].totalScore / this.selectedRuleScore))*100);                   \r\n                    if(this.eventSummaryData[b].sessionIds.some(id => id === this.eventData[i].session_id)) {\r\n                    } else {\r\n                      this.eventSummaryData[b].sessionIds.push(this.eventData[i].session_id);\r\n                      this.eventSummaryData[b].sessionCount = this.eventSummaryData[b].sessionCount + 1;\r\n                      this.eventSummaryData[b].sessionCountPercent = Math.round(((this.eventSummaryData[b].sessionCount / this.selectedRuleSessionCount))*100);\r\n                    }                    \r\n                  }\r\n                }\r\n              })\r\n            } else {\r\n              this.eventSummaryData[b].count = this.eventSummaryData[b].count + 1;\r\n              this.eventSummaryData[b].totalScore = this.eventSummaryData[b].totalScore + this.eventData[i]['riskScore-'+this.selectedRule];\r\n              this.eventSummaryData[b].eventCountPercent = Math.round(((this.eventSummaryData[b].count / this.selectedRuleCount))*100);\r\n              this.eventSummaryData[b].scoreCountPercent = Math.round(((this.eventSummaryData[b].totalScore / this.selectedRuleScore))*100); \r\n              if(this.eventSummaryData[b].sessionIds.some(id => id === this.eventData[i].session_id)) {\r\n              } else {\r\n                this.eventSummaryData[b].sessionIds.push(this.eventData[i].session_id);\r\n                this.eventSummaryData[b].sessionCount = this.eventSummaryData[b].sessionCount + 1;\r\n                this.eventSummaryData[b].sessionCountPercent = Math.round(((this.eventSummaryData[b].sessionCount / this.selectedRuleSessionCount))*100);\r\n              }\r\n            }            \r\n          }          \r\n        }      \r\n      })       \r\n    }\r\n    \r\n\r\n  }\r\n\r\n  \r\n\r\n\r\n  \r\n  tuneRule(data){\r\n    this.foundRule = false;\r\n    //Add rule tuning conditions to array\r\n    if(this.ruleTuning.length == 0){\r\n      this.ruleTuning.push({'data':{'name': this.selectedRule, 'value': '', 'count': '', 'score': '', 'sessionCount': ''},'children': []});\r\n      this.ruleTuning[0].children.push({'data':{'name': data.fieldName, 'value': data.fieldValue, 'count': data.count, 'score':data.totalScore, 'sessionCount':data.sessionCount, 'scorePercent': Math.round(((data.totalScore / this.uSessionSummaryRiskScore))*100)}})\r\n    } else {\r\n      this.ruleTuning.forEach((obj, index) => {\r\n        if(obj.data.name === this.selectedRule) {\r\n          this.foundRule = true;\r\n          if(obj.children.some(theEvent => theEvent.data.name === data.fieldName && theEvent.data.value === data.fieldValue)) {\r\n          } else {\r\n            obj.children.push({'data':{'name': data.fieldName, 'value': data.fieldValue, 'count': data.count, 'score':data.totalScore, 'sessionCount': data.sessionCount, 'scorePercent': Math.round(((data.totalScore / this.uSessionSummaryRiskScore))*100)}})           \r\n          }\r\n          \r\n        }\r\n      })\r\n      if(this.foundRule == false) {\r\n        this.ruleTuning.push({'data':{'name': this.selectedRule, 'value': '', 'count': '', 'score': '', 'sessionCount': ''},'children': [{'data':{'name': data.fieldName, 'value': data.fieldValue, 'count': data.count, 'score':data.totalScore, 'sessionCount':data.sessionCount, 'scorePercent': Math.round(((data.totalScore / this.uSessionSummaryRiskScore))*100)}}]});\r\n      }\r\n    }\r\n\r\n    //Go back through tuned rules and sum up changes per rule\r\n    this.ruleTuning.forEach((obj, index) => {\r\n      obj.data.count = 0;\r\n      obj.data.score = 0;\r\n      obj.data.sessionCount = 0;\r\n      obj.children.forEach((obj2, index2) => {\r\n        obj.data.count = obj.data.count + obj2.data.count;\r\n        obj.data.score = obj.data.score + obj2.data.score;\r\n        obj.data.sessionCount = obj.data.sessionCount + obj2.data.sessionCount;\r\n      })\r\n    })\r\n\r\n    //Apply changes to rule counts\r\n    for (var b=0; b < this.thResultsUsers.ruleCounts.length; b++) {\r\n      this.ruleTuning.forEach((obj, index) => {\r\n        if (obj.data.name === this.thResultsUsers.ruleCounts[b].rule) {\r\n          this.thResultsUsers.ruleCounts[b].count = this.thResultsUsers.ruleCounts[b].originalCount - obj.data.count;\r\n          this.thResultsUsers.ruleCounts[b].totalScore = this.thResultsUsers.ruleCounts[b].originalTotalScore - obj.data.score;\r\n          this.thResultsUsers.ruleCounts[b].sessionCount = this.thResultsUsers.ruleCounts[b].originalSessionCount - obj.data.sessionCount;\r\n          if(obj.data.name === this.selectedRule) {\r\n            this.selectedRuleScore = this.thResultsUsers.ruleCounts[b].totalScore;\r\n            this.selectedRuleCount = this.thResultsUsers.ruleCounts[b].count;\r\n            this.selectedRuleSessionCount = this.thResultsUsers.ruleCounts[b].sessionCount;\r\n          }\r\n        }\r\n      })\r\n    }\r\n    this.ruleData = this.thResultsUsers.ruleCounts;\r\n    \r\n\r\n    this.eventData.forEach((obj, index) => {\r\n      Object.keys(obj).forEach((obj2, index2) => {\r\n        if(data.fieldName === obj2 && data.fieldValue === obj[obj2]) {\r\n          if(this.bannedEvents.some(theEvent => theEvent.event_id === obj.event_id)) {\r\n            this.bannedEvents.forEach((obj3, index3) => {\r\n              if(obj3.event_id === obj.event_id){\r\n                if(obj3.rules.some(theRule => theRule === this.selectedRule)){    \r\n                  //console.log(this.selectedRule+ ' is already banned for event_id '+obj.event_id);         \r\n                } else {\r\n                  obj3.event_id[obj.event_id].rules.push(this.selectedRule);\r\n                } \r\n              }\r\n            })                 \r\n          } else {\r\n            this.bannedEvents.push({'event_id': obj.event_id, 'rules': [this.selectedRule]})\r\n          }\r\n        }\r\n      })      \r\n    })\r\n\r\n    //Test out rule exceptions on sessions\r\n    this.thResultsUsers.sessions.forEach((obj, index) => {\r\n      obj.riskScoreTuned = obj.riskScore;\r\n      Object.keys(obj.rules.triggeredRuleEvents).forEach((obj2, index2) => {\r\n        if(this.bannedEvents.some(theEvent => theEvent.event_id === obj2)) {\r\n          this.bannedEvents.forEach((obj3, index3) => {\r\n            if(obj3.event_id === obj2) {\r\n              obj3.rules.forEach((obj4, index4) => {\r\n                Object.keys(obj.rules.triggeredRuleEvents[obj2].fields).forEach((obj5, index4) => {\r\n                  //console.log ('obj5 = '+obj5 + ' '+ obj5.substring(obj5.indexOf('-') + 1));\r\n                  if(obj3.rules.some(theRule => theRule === obj5.substring(obj5.indexOf('-') + 1))){ \r\n                    //console.log('found one at index '+ index);\r\n                    //console.log('subtracting '+obj.rules.triggeredRuleEvents[obj2].fields[obj5]+ ' from '+obj.riskScoreTuned);\r\n                    obj.riskScoreTuned = obj.riskScoreTuned - obj.rules.triggeredRuleEvents[obj2].fields[obj5];        \r\n                  } \r\n                })\r\n              })\r\n            }   \r\n          })\r\n        }\r\n      })\r\n    })\r\n\r\n    // Calculate results of rule exceptions on sessions\r\n    this.uSessionSummaryTunedNotableCount = 0;\r\n    this.uSessionSummaryTunedNotablePerDay = 0;\r\n    this.uSessionSummaryTunedRiskScore = 0;\r\n    this.uSessionSummaryTunedNotableCountPercent = 0;\r\n    this.uSessionSummaryTunedNotablePerDayPercent = 0;\r\n    this.uSessionSummaryTunedRiskScorePercent = 0;\r\n    for (var i=0; i < this.thResultsUsers.sessions.length; i++) {\r\n      if(this.thResultsUsers.sessions[i].riskScoreTuned >= 90) this.uSessionSummaryTunedNotableCount = this.uSessionSummaryTunedNotableCount + 1\r\n      this.uSessionSummaryTunedRiskScore = this.uSessionSummaryTunedRiskScore + this.thResultsUsers.sessions[i].riskScoreTuned;\r\n    }\r\n    this.uSessionSummaryTunedNotablePerDay = Math.round(this.uSessionSummaryTunedNotableCount / this.queryUnitNum );\r\n    this.uSessionSummaryTunedNotableCountPercent = Math.round(((this.uSessionSummaryTunedNotableCount / this.uSessionSummaryNotableCount)-1)*100);\r\n    this.uSessionSummaryTunedNotablePerDayPercent = Math.round(((this.uSessionSummaryTunedNotablePerDay / this.uSessionSummaryNotablePerDay)-1)*100);\r\n    this.uSessionSummaryTunedRiskScorePercent = Math.round(((this.uSessionSummaryTunedRiskScore / this.uSessionSummaryRiskScore)-1)*100);\r\n\r\n    //Reset user session score rollup and re-evaluate based on the tuned risk scores from sessions\r\n    this.thResultsUsers.userCounts.forEach((obj, index) => {\r\n      obj.totalScore = 0;\r\n    })\r\n    for (var i=0; i < this.thResultsUsers.sessions.length; i++) {\r\n      for (var b=0; b < this.thResultsUsers.userCounts.length; b++) {\r\n        if (this.thResultsUsers.sessions[i].user === this.thResultsUsers.userCounts[b].user) {\r\n          this.thResultsUsers.userCounts[b].totalScore = this.thResultsUsers.userCounts[b].totalScore + this.thResultsUsers.sessions[i].riskScoreTuned;\r\n        }\r\n      }     \r\n    }\r\n    this.userData = this.thResultsUsers.userCounts;\r\n\r\n    //re-calcualte results of rule exceptions on event data\r\n    this.setEvents(this.selectedRule);\r\n\r\n    //DOM refresh issues in angular, this fixed it\r\n    this.refresh = false;\r\n    this.refresh = true;\r\n    \r\n  }\r\n\r\n  startValidation() {\r\n    this.showValidation = true;\r\n    this.loading = true;\r\n    this.showLogin = false;\r\n    this.showHome = false;\r\n    this.visibleDataValidationProgress = true;   \r\n    //Get all rules\r\n    axios('https://'+this.host+'/uba/api/rules/fetchRules?filterBy=all', {\r\n      method: 'GET',\r\n      withCredentials: 'include',\r\n    }).then(response => {\r\n      this.allRules = response.data;\r\n      this.allRules.forEach((obj, index) => {\r\n        obj.rules.forEach((obj2, index) => {\r\n          if(obj2.ruleDef.modelName === 'FACT') {\r\n            obj2.canTrigger = 'N/A';\r\n          } else {\r\n            obj2.canTrigger = false;\r\n          }\r\n          obj2.hasTriggered = false;\r\n        })             \r\n      })\r\n      this.getModels();\r\n    }).catch(error => {\r\n      console.log('error');\r\n      console.log(error);\r\n      this.errors.push('Error fetching all rules');\r\n      this.errorVisible = true;\r\n      alert('ERROR fetching data: Check your URL and authenticaiton details and try again');\r\n    }); \r\n  }\r\n  \r\n  \r\n\r\n  getModels() {\r\n    //Get all models\r\n    axios('https://'+this.host+'/uba/api/rules/modelDefinitions', {\r\n      method: 'GET',\r\n      withCredentials: 'include',\r\n    }).then(response => {\r\n      this.allModels = response.data;\r\n      //console.log(response);\r\n      Object.keys(this.allModels).forEach((obj, index) => {\r\n        this.allModels[obj].populating = false;\r\n        this.allModels[obj].attributes.populating = false;\r\n      })\r\n      this.checkModels(0);\r\n    }).catch(error => {\r\n      console.log(error);\r\n      this.errors.push('Error fetching all models');\r\n      this.errorVisible = true;\r\n    });      \r\n  }\r\n\r\n  checkModels(offset) {\r\n    var counter = 0;\r\n    if(offset != 0) {\r\n      var tempIndex = offset * this.allowedCount;\r\n    } else {\r\n      var tempIndex = 0;\r\n    }\r\n    var maxIndex = tempIndex + this.allowedCount;\r\n    var tempKeys = Object.keys(this.allModels);\r\n    this.todoModels = tempKeys.length;\r\n    var tempArray = [];\r\n    for (var b=tempIndex; b < maxIndex; b++) {\r\n      tempArray.push(tempKeys[b]);\r\n    }\r\n    tempArray.forEach((obj,index) => {\r\n      if(obj != undefined) {\r\n        axios('https://'+this.host+'/uba/api/histograms/search?maxNumberOfResults=1&modelName='+obj, {\r\n          method: 'GET',\r\n          withCredentials: 'include',\r\n        }).then(response => {\r\n          //  console.log(response);\r\n          this.allModels[obj].histograms = response.data;\r\n          if(this.allModels[obj].histograms.histograms.length != 0) {\r\n            this.allModels[obj].populating = true;\r\n            this.allModels[obj].attributes.populating = true;\r\n          }\r\n        //  console.log('this index after = '+index);\r\n          counter = counter + 1;\r\n          this.doneCountModels = this.doneCountModels + 1;\r\n          this.dataValidationProgress = Math.round(((this.doneCountModels/this.todoModels) * 20));\r\n           \r\n          if(counter < this.allowedCount) {\r\n          } else {\r\n          if(this.doneCountModels <= tempKeys.length) this.checkModels(offset+1);\r\n          }\r\n          if(this.doneCountModels === tempKeys.length) {\r\n            console.log('moving to checkRules');\r\n            this.checkRules(0);\r\n          }\r\n        }).catch(error => {\r\n          console.log(error);\r\n          this.errors.push('Error fetching model: '+obj);\r\n          this.errorVisible = true;\r\n          counter = counter + 1;\r\n          this.doneCountModels = this.doneCountModels + 1;\r\n          if(counter < this.allowedCount) {\r\n          } else {\r\n          if(this.doneCountModels <= tempKeys.length) this.checkModels(offset+1);\r\n          }\r\n          if(this.doneCountModels === tempKeys.length) {\r\n            console.log('moving to checkRules');\r\n            this.checkRules(0);\r\n          }\r\n        });\r\n      }\r\n      \r\n    })\r\n    \r\n    \r\n  }\r\n\r\n  checkRules(offset) {\r\n    var counter = 0;\r\n    if(offset != 0) {\r\n      var tempIndex = offset * this.allowedCount;\r\n    } else {\r\n      var tempIndex = 0;\r\n    }\r\n    var maxIndex = tempIndex + this.allowedCount;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    this.allRules.forEach((obj,index) => {\r\n      obj.rules.forEach((obj2,index2) => {\r\n        tempKeys.push(obj2.ruleId);\r\n      })\r\n    })\r\n    this.todoRules = tempKeys.length;\r\n    for (var a=tempIndex; a < maxIndex; a++) {\r\n      tempArray.push(tempKeys[a]);\r\n    }\r\n    //Check all rules if triggered\r\n    tempArray.forEach((obj,index) => {\r\n      axios('https://'+this.host+'/uba/api/rules/triggerFrequency?ruleId='+obj, {\r\n        method: 'GET',\r\n        withCredentials: 'include',\r\n      }).then(response => {\r\n        //  console.log(response);\r\n        this.allRules.forEach((obj2,index2) => {\r\n          obj2.rules.forEach((obj3,index3) => {\r\n            if(obj3.ruleId === obj) {\r\n              obj3.triggerFreq = response.data;\r\n              if(obj3.triggerFreq.triggerFrequency === 0) {\r\n              } else{\r\n                obj3.hasTriggered = true;\r\n              }\r\n            }\r\n          })\r\n        })\r\n        counter = counter + 1;\r\n        this.doneCountRules = this.doneCountRules + 1;\r\n        this.dataValidationProgress = Math.round((((this.doneCountRules/this.todoRules) * 20) + 20));\r\n        //console.log('Rules counter = '+counter);\r\n        //console.log('doneCountRules = '+this.doneCountRules);\r\n        //console.log('tempKeys.length = '+tempKeys.length);\r\n         \r\n        if(counter < this.allowedCount) {\r\n        //  console.log('Index = '+b+' this.activeCount LESSER this.allowedCount');\r\n        } else {\r\n        //  console.log('Index = '+b+' this.activeCount GREATER this.allowedCount');\r\n          if(this.doneCountRules <= tempKeys.length) this.checkRules(offset+1);\r\n        }\r\n         if(this.doneCountRules === tempKeys.length) this.combineArrays();\r\n      }).catch(error => {\r\n        console.log(error);\r\n          this.errors.push('Error fetching rule: '+obj);\r\n          this.errorVisible = true;\r\n          counter = counter + 1;\r\n          this.doneCountRules = this.doneCountRules + 1;\r\n          if(counter < this.allowedCount) {\r\n          //  console.log('Index = '+b+' this.activeCount LESSER this.allowedCount');\r\n          } else {\r\n          //  console.log('Index = '+b+' this.activeCount GREATER this.allowedCount');\r\n            if(this.doneCountRules <= tempKeys.length) this.checkRules(offset+1);\r\n          }\r\n          if(this.doneCountRules === tempKeys.length) this.combineArrays();\r\n      });\r\n\r\n    })\r\n    \r\n      \r\n  }\r\n\r\n  combineArrays() {\r\n    this.rulesAndModels = [];\r\n    this.allRules.forEach((obj,index) => {\r\n      obj.rules.forEach((obj2,index2) => {\r\n        var ruleType;\r\n        if(obj2.ruleDef.modelName === 'FACT') {\r\n          ruleType = 'FACT';\r\n        } else {\r\n          ruleType = 'Model';\r\n        }\r\n\r\n        if(this.allModels[obj2.ruleDef.modelName] == undefined) {\r\n          this.rulesAndModels.push({ruleCat: obj.categoryId, ruleId: obj2.ruleDef.ruleId, ruleName: obj2.ruleDef.ruleName, ruleType: ruleType, modelName: obj2.ruleDef.modelName, modelDisabled: 'N/A', populating: 'N/A', hasTriggered: obj2.hasTriggered.toString(), ruleDef: obj2.ruleDef})\r\n        } else {\r\n          this.rulesAndModels.push({ruleCat: obj.categoryId, ruleId: obj2.ruleDef.ruleId, ruleName: obj2.ruleDef.ruleName, ruleType: ruleType, modelName: obj2.ruleDef.modelName, modelDisabled: this.allModels[obj2.ruleDef.modelName].attributes.disabled, populating: this.allModels[obj2.ruleDef.modelName].populating.toString(), hasTriggered: obj2.hasTriggered.toString(), ruleDef: obj2.ruleDef, modelDef: this.allModels[obj2.ruleDef.modelName].attributes})\r\n        }\r\n        \r\n      })\r\n    })\r\n    \r\n    this.findRequiredData(this.rulesAndModels);\r\n  }\r\n\r\n  findRequiredData(rulesAndModels) {\r\n    rulesAndModels.forEach((obj,index) => {\r\n      var tempfield = '';\r\n      //If not a fact based rule, determine the event types required for model to trigger\r\n      if(obj.modelDef != undefined) {\r\n        obj.modelDef.requiredEventFields = [];\r\n        obj.modelDef.presentEventFields = [];\r\n        obj.modelDef.missingEventFields = [];\r\n        //If the feature has no parenthesis then just use a field name\r\n        if(obj.modelDef.feature.toLowerCase().startsWith('count') || obj.modelDef.feature.toLowerCase().startsWith('distinct') || obj.modelDef.feature.toLowerCase().startsWith('sum') || obj.modelDef.feature.toLowerCase().startsWith('sequence')) {\r\n          if((obj.modelDef.feature.toLowerCase().substring(obj.modelDef.feature.indexOf(\"(\")+1)).startsWith('getvalue(')) {\r\n            tempfield = obj.modelDef.feature.toLowerCase().substring(obj.modelDef.feature.indexOf(\"(\")+1, obj.modelDef.feature.indexOf(\")\")+1).replace(/ /g,\"\");        \r\n          } else {\r\n            tempfield = obj.modelDef.feature.toLowerCase().substring(obj.modelDef.feature.indexOf(\"(\")+1, obj.modelDef.feature.indexOf(\",\")).replace(/ /g,\"\");    \r\n          }   \r\n        } else {\r\n          tempfield = obj.modelDef.feature.toLowerCase().replace(/ /g,\"\");            \r\n        }\r\n        if(obj.modelDef.requiredEventFields.some(field => field === tempfield)) {\r\n        } else {\r\n          obj.modelDef.requiredEventFields.push(tempfield);\r\n        }\r\n        if(obj.modelDef.trainIf.toLowerCase().startsWith('count') || obj.modelDef.trainIf.toLowerCase().startsWith('distinct') || obj.modelDef.trainIf.toLowerCase().startsWith('sum') || obj.modelDef.trainIf.toLowerCase().startsWith('sequence')) {\r\n          if((obj.modelDef.trainIf.toLowerCase().substring(obj.modelDef.trainIf.indexOf(\"(\")+1)).startsWith('getvalue(')) {\r\n            tempfield = obj.modelDef.trainIf.toLowerCase().substring(obj.modelDef.trainIf.indexOf(\"(\")+1, obj.modelDef.trainIf.indexOf(\")\")+1).replace(/ /g,\"\");\r\n          } else {\r\n            tempfield = obj.modelDef.trainIf.toLowerCase().substring(obj.modelDef.trainIf.indexOf(\"(\")+1, obj.modelDef.trainIf.indexOf(\",\")).replace(/ /g,\"\");\r\n          }          \r\n        }\r\n        if(obj.modelDef.requiredEventFields.some(field => field === tempfield)) {\r\n        } else {\r\n          obj.modelDef.requiredEventFields.push(tempfield);\r\n        }\r\n        if(obj.modelDef.trainIf.toLowerCase().includes('exists(')) {\r\n          tempfield = obj.modelDef.trainIf.toLowerCase().substring(obj.modelDef.trainIf.indexOf(\"exists(\")+7, obj.modelDef.trainIf.indexOf(\")\", (obj.modelDef.trainIf.indexOf(\"exists(\")+7)));\r\n          if(obj.modelDef.requiredEventFields.some(field => field === tempfield)) {\r\n          } else {\r\n            obj.modelDef.requiredEventFields.push(tempfield);\r\n          }\r\n        }\r\n        if(obj.modelDef.scopeType === 'USER' || obj.modelDef.scopeType === 'PEERS' || obj.modelDef.scopeType === 'DEVICE') {\r\n          tempfield = obj.modelDef.scopeValue.toLowerCase().replace(/ /g,\"\");\r\n          if(obj.modelDef.requiredEventFields.some(field => field === tempfield)) {\r\n          } else {\r\n            obj.modelDef.requiredEventFields.push(tempfield);\r\n          }\r\n        }\r\n        //If the model is trained by counting events at the end of the session or sequence then the true event types required are in the \"Count\" statement in the model's feature\r\n        if(obj.modelDef.histogramEventTypes.includes('session-end') || obj.modelDef.histogramEventTypes.includes('sequence-end')) {\r\n          obj.modelDef.requiredEventTypes = obj.modelDef.feature.substring(obj.modelDef.feature.indexOf(\",\")+1, obj.modelDef.feature.lastIndexOf(\")\")).replace(/ /g,\"\").split(\",\");\r\n          for (var i = obj.modelDef.requiredEventTypes.length - 1; i>= 0; i--) {\r\n            if(obj.modelDef.requiredEventTypes[i].startsWith(\"'\") && obj.modelDef.requiredEventTypes[i].endsWith(\"'\") && obj.modelDef.requiredEventTypes[i].charAt(1).match(/[a-z]/) != null) {\r\n              obj.modelDef.requiredEventTypes[i] = obj.modelDef.requiredEventTypes[i].replace(/'/g,\"\");\r\n            } else {\r\n              obj.modelDef.requiredEventTypes.splice(i, 1);\r\n            }\r\n        }\r\n          obj.ruleDef.requiredEvents = obj.modelDef.requiredEventTypes;\r\n          //Otherwise we can simply use the \"histogramEventTypes\" field\r\n        } else {\r\n          if(obj.modelDef.histogramEventTypes.includes(':')) {\r\n            obj.modelDef.requiredEventTypes = obj.modelDef.histogramEventTypes.split(\":\");\r\n            obj.ruleDef.requiredEvents = obj.modelDef.requiredEventTypes;\r\n          } else {\r\n            obj.modelDef.requiredEventTypes = [];\r\n            obj.modelDef.requiredEventTypes.push(obj.modelDef.histogramEventTypes);\r\n            obj.ruleDef.requiredEvents = obj.modelDef.requiredEventTypes;\r\n          }\r\n        }\r\n      } else {\r\n          //If there is no model then use the rule definition field\r\n          obj.ruleDef.requiredEvents = obj.ruleDef.ruleEventTypes;\r\n        }     \r\n    })\r\n    \r\n    if(this.onPreviousSession) {\r\n      this.bootstrapEventTypes();\r\n    } else {\r\n      this.getEventTypes();\r\n    }\r\n  }\r\n\r\n  getEventTypes() {\r\n    this.eventTypes = [];\r\n    this.rulesAndModels.forEach((obj,index) => {\r\n      if(obj.populating != 'N/A') {\r\n        obj.ruleDef.requiredEvents.forEach((obj2,index2) => {\r\n          if(this.eventTypes.some(event => event.name === obj2)) {\r\n          } else {\r\n            this.eventTypes.push({name: obj2});\r\n          }\r\n        })\r\n      }\r\n    })\r\n    \r\n    this.getEventTypeSessions(0);  \r\n    \r\n    \r\n  }\r\n\r\n  getEventTypeSessions(offset) {\r\n   // console.log('getting event types offset: '+offset);\r\n    var counter = 0;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    var tempAdded = 0;\r\n    this.eventTypes.forEach((obj,index) => {\r\n      tempKeys.push(obj);\r\n    })\r\n    this.todoEventTypes = tempKeys.length;\r\n    for (var a=0; a < tempKeys.length && tempAdded <= this.allowedEventTypeCount; a++) {\r\n      if(this.doneEventTypes.some(event => event.name === tempKeys[a].name)) {\r\n      } else {\r\n      //  console.log('pushing '+tempKeys[a].name+' to doneEventTypes');\r\n        tempArray.push(tempKeys[a]);\r\n        this.doneEventTypes.push(tempKeys[a]);\r\n        tempAdded++;\r\n      }      \r\n    }\r\n    //Check all event types if they exist\r\n    tempArray.forEach((obj,index) => {\r\n      if(obj != undefined) {\r\n       // console.log('querying for '+obj.name);\r\n       this.activeEventTypes++\r\n      chrome.tabs.sendMessage(this.tabID, {message: \"eventTypeSearch\", eventType: obj, queryUnit: this.queryUnit, queryUnitNum: this.queryUnitNum}, (response) => {\r\n        if(typeof response == 'undefined') {\r\n          console.log ('response is undefined');\r\n          this.errors.push('error fetching all session IDs for event type: '+obj.name+'. Trying again');\r\n          this.errorVisible = true;     \r\n          for (var a = 0; a < this.doneEventTypes.length; a++) {\r\n            if(this.doneEventTypes[a].name === obj.name) this.doneEventTypes.splice(a, 1);\r\n          }              \r\n          this.getEventTypeSessions(offset);\r\n        } else {\r\n          this.activeEventTypes--\r\n        this.eventTypes.forEach((obj2, index2) => {\r\n          if(obj.name === obj2.name) {\r\n            obj2.response = response;\r\n            obj2.todoSessionIDs = [];\r\n            obj2.todoAssetIDs = [];\r\n            obj2.todoSessionEventIDs = [];\r\n            obj2.todoAssetEventIDs = [];\r\n            obj2.doneSessionIDs = [];\r\n            obj2.doneAssetIDs = [];\r\n            obj2.doneSessionEventIDs = [];\r\n            obj2.doneAssetEventIDs = [];\r\n            obj2.sessionEventDetails = [];\r\n            obj2.sessionEventFields = [];\r\n            obj2.assetEventDetails = [];\r\n            obj2.assetEventFields = [];\r\n                  \r\n            if (Object.keys(obj2.response.entities).length != 0) {  \r\n              obj2.populating = true;\r\n            } else {\r\n              obj2.populating = false;\r\n            }\r\n            //console.log('counter BEFORE = ',counter);\r\n            counter = counter + 1;\r\n            //console.log('counter AFTER = ',counter);            \r\n            //console.log('counter: '+counter+' for offset: '+offset);\r\n            //console.log('tempKeys.length = ',tempKeys.length);\r\n            //console.log('this.doneCountEventTypes BEFORE = ',this.doneCountEventTypes);             \r\n            this.doneCountEventTypes = this.doneCountEventTypes + 1;\r\n            //console.log('this.doneCountEventTypes AFTER = ',this.doneCountEventTypes);\r\n            //console.log('this.dataValidationProgress BEFORE = ',this.dataValidationProgress);\r\n            this.dataValidationProgress = Math.round((((this.doneCountEventTypes/this.todoEventTypes) * 20) + 40));\r\n            //console.log('this.dataValidationProgress AFTER = ',this.dataValidationProgress);\r\n                          \r\n            if(counter === this.allowedEventTypeCount+1 || this.todoEventTypes-this.doneCountEventTypes === 0) {\r\n              offset = offset + 1;\r\n              if(this.doneCountEventTypes < tempKeys.length) {\r\n                //console.log('short, running again');\r\n                this.getEventTypeSessions(offset);\r\n\r\n              } else {\r\n                if (obj.response.entities.asset != undefined) obj2.response.entities.asset.sort((a, b) => (a.assetSequenceInfo.numOfEvents > b.assetSequenceInfo.numOfEvents) ? -1 : 1);\r\n                if (obj.response.entities.session != undefined) obj2.response.entities.session.sort((a, b) => (a.sessionInfo.numOfEvents > b.sessionInfo.numOfEvents) ? -1 : 1);\r\n                console.log('starting to get session details');\r\n                this.getEventTypeSessionDetails(0);\r\n              } \r\n            }\r\n            \r\n          }\r\n        })\r\n        }\r\n        \r\n      });     \r\n    }     \r\n  })\r\n       \r\n  }\r\n\r\n\r\n  getEventTypeSessionDetails(offset){\r\n    var counter = 0;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    var tempAdded = 0;\r\n    this.eventTypes.forEach((obj,index) => {\r\n      if (obj.response.entities.session != undefined) tempKeys.push(obj);\r\n    })\r\n    this.todoEventTypeSessions = tempKeys.length;\r\n    for (var a=0; a < tempKeys.length && tempAdded <= this.allowedEventTypeCount; a++) {\r\n      //console.log('tempAdded: '+tempAdded);\r\n      if(this.doneEventTypeSessions.some(event => event.name === tempKeys[a].name)) {\r\n      } else {\r\n        //console.log('pushing '+tempKeys[a].name+' to doneEventTypeSessions');\r\n        tempArray.push(tempKeys[a]);\r\n        this.doneEventTypeSessions.push(tempKeys[a]);\r\n        tempAdded++;\r\n      }      \r\n    }\r\n\r\n    tempArray.forEach((obj,index) => {\r\n      this.eventTypes.forEach((obj2, index2) => {\r\n        if(obj.name === obj2.name) {\r\n          obj2.inSession = true;\r\n          obj2.sessionCount = obj2.response.entities.session.length;\r\n          obj2.totalCount = obj2.totalCount + obj2.response.entities.session.length;\r\n          var tempSessions = 0               \r\n          obj2.response.entities.session.forEach((obj3,index3) => {\r\n            if(index3 < this.allowedEventTypeCount) {\r\n              tempSessions++\r\n              axios('https://'+this.host+'/uba/api/sequence/events/eventType?sequenceType=session&sequenceId='+obj3.sessionInfo.sessionId+'&eventType='+obj2.name+'&numberOfResults='+this.allowedEventsPerSession, {\r\n                method: 'GET',\r\n                withCredentials: 'include',\r\n              }).then(response => {\r\n                for (var i = 0; i < Object.keys(response.data).length; i++) {\r\n                  obj2.todoSessionEventIDs.push({'sessionId': obj3.sessionInfo.sessionId, 'eventId': response.data[i]});\r\n                }\r\n                tempSessions--                \r\n                if(tempSessions === 0){\r\n                  this.doneCountEventTypeSessions++;\r\n                  counter++;\r\n                } \r\n                this.dataValidationProgress = Math.round((((this.doneCountEventTypeSessions/this.todoEventTypeSessions) * 10) + 60));\r\n                //console.log('counter: for event type sessions '+counter+' for offset: '+offset);\r\n                 \r\n                if(tempSessions === 0 && (counter === this.allowedEventTypeCount+1 || this.todoEventTypeSessions-this.doneCountEventTypeSessions === 0)) {\r\n                  offset++;\r\n                  //console.log('counter: '+counter+' === '+this.allowedEventTypeCount+1+'. offset now '+offset);\r\n                  if(this.doneCountEventTypeSessions < tempKeys.length) {\r\n                    this.getEventTypeSessionDetails(offset);\r\n                  } else {\r\n                    console.log('Moving to Asset Event Details here');\r\n                    this.getEventTypeAssetDetails(0);\r\n                  }\r\n                }\r\n              }).catch(error => {\r\n                console.log(error);\r\n                this.errors.push('Error fetching single session for event type: '+obj2.name);\r\n                this.errorVisible = true;\r\n              });\r\n            }\r\n          })\r\n        }\r\n      })\r\n    })\r\n     \r\n  }\r\n\r\n  getEventTypeAssetDetails(offset){\r\n    var counter = 0;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    var tempAdded = 0;\r\n    this.eventTypes.forEach((obj,index) => {\r\n      if (obj.response.entities.asset != undefined) tempKeys.push(obj);\r\n    })\r\n    this.todoEventTypeAssets = tempKeys.length;\r\n    for (var a=0; a < tempKeys.length && tempAdded <= this.allowedEventTypeCount; a++) {\r\n      if(this.doneEventTypeAssets.some(event => event.name === tempKeys[a].name)) {\r\n      } else {\r\n        tempArray.push(tempKeys[a]);\r\n        this.doneEventTypeAssets.push(tempKeys[a]);\r\n        tempAdded++;\r\n      }      \r\n    }\r\n\r\n    tempArray.forEach((obj,index) => {\r\n      this.eventTypes.forEach((obj2, index2) => {\r\n        if(obj.name === obj2.name) {\r\n            obj2.inAsset = true;\r\n            obj2.assetCount = obj2.response.entities.asset.length;\r\n            obj2.totalCount = obj2.totalCount + obj2.response.entities.asset.length; \r\n            var tempSessions = 0                \r\n            obj2.response.entities.asset.forEach((obj3,index3) => {\r\n            if(index3 < this.allowedEventTypeCount) {\r\n              tempSessions++\r\n              axios('https://'+this.host+'/uba/api/sequence/events/eventType?sequenceType=asset&sequenceId='+obj3.assetSequenceInfo.assetSequenceId+'&eventType='+obj2.name+'&numberOfResults='+this.allowedEventsPerSession, {\r\n                method: 'GET',\r\n                withCredentials: 'include',\r\n              }).then(response => {\r\n                for (var i = 0; i < Object.keys(response.data).length; i++) {\r\n                  obj2.todoAssetEventIDs.push({'sessionId': obj3.assetSequenceInfo.assetSequenceId, 'assetId': obj3.assetSequenceInfo.assetId, 'eventId': response.data[i]});\r\n                }\r\n                tempSessions--                \r\n                if(tempSessions === 0){\r\n                  this.doneCountEventTypeAssets++;\r\n                  counter++;\r\n                } \r\n                this.dataValidationProgress = Math.round((((this.doneCountEventTypeAssets/this.todoEventTypeAssets) * 10) + 70));\r\n                //console.log('counter: for event type sessions '+counter+' for offset: '+offset);\r\n                 \r\n                if(tempSessions === 0 && (counter === this.allowedEventTypeCount+1 || this.todoEventTypeAssets-this.doneCountEventTypeAssets === 0)) {\r\n                  offset++;\r\n                  //console.log('counter: '+counter+' === '+this.allowedEventTypeCount+1+'. offset now '+offset);\r\n                  if(this.doneCountEventTypeAssets < tempKeys.length) {\r\n                    this.getEventTypeAssetDetails(offset);\r\n                  } else {\r\n                    console.log('Moving to Session Event Details here');\r\n                    this.checkEventTypeSessionDetails(0);\r\n                  }\r\n                }\r\n              }).catch(error => {\r\n                console.log(error);\r\n                this.errors.push('Error fetching single session for event type: '+obj2.name);\r\n                this.errorVisible = true;\r\n              });\r\n            }\r\n          })\r\n        }\r\n      })\r\n    })\r\n     \r\n  }\r\n\r\n\r\n  checkEventTypeSessionDetails(offset) {\r\n    var counter = 0;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    var tempAdded = 0;\r\n    this.eventTypes.forEach((obj,index) => {\r\n      if (obj.response.entities.session != undefined && obj.todoSessionEventIDs.length !== 0) tempKeys.push(obj);\r\n    })\r\n    this.todoEventTypeSessionsDetails = tempKeys.length;\r\n    for (var a=0; a < tempKeys.length && tempAdded <= this.allowedEventTypeSessionCount; a++) {\r\n      // console.log('tempAdded: ',tempAdded);\r\n      if(this.doneEventTypeSessionsDetails.some(event => event.name === tempKeys[a].name)) {\r\n      } else {\r\n        // console.log('pushing ',tempKeys[a].name,' to doneEventTypeSessionsDetails');\r\n        tempArray.push(tempKeys[a]);\r\n        this.doneEventTypeSessionsDetails.push(tempKeys[a]);\r\n        tempAdded++;\r\n      }      \r\n    }\r\n\r\n    tempArray.forEach((obj,index) => {\r\n      this.eventTypes.forEach((obj2, index2) => {\r\n        if(obj.name === obj2.name) {     \r\n            var tempSessions = 0;       \r\n            obj2.todoSessionEventIDs.forEach((obj4,index4) => {\r\n              if(obj2.doneSessionEventIDs.some(event => event.sessionId === obj4.sessionId && event.eventId === obj4.eventId)){\r\n              } else {\r\n                obj2.doneSessionEventIDs.push({'sessionId': obj4.sessionId, 'eventId': obj4.eventId});\r\n                tempSessions++\r\n                axios('https://'+this.host+'/uba/api/timeline/events/start?username=*&startSequenceType=session&startSequenceId='+obj4.sessionId+'&preferredNumberOfEvents=1&anomalyOnly=false&sequenceTypes=web&sequenceTypes=session&sequenceTypes=endpoint&sequenceTypes=file&startEventId='+obj4.eventId, {\r\n                  method: 'GET',\r\n                  withCredentials: 'include',\r\n                }).then(response => {\r\n                  obj2.sessionEventDetails.push(response.data);\r\n                    obj2.sessionEventDetails.forEach((obj5) => {\r\n                      if(typeof obj5.firstEvent !== 'undefined') {\r\n                        if(typeof obj5.aggregatedEvents[0].es[0].fields.rawlog_refs !== 'undefined') {\r\n                          obj5.firstEvent.fields.rawEventSearch = '{\"rawlog_refs\":'+JSON.stringify(obj5.aggregatedEvents[0].es[0].fields.rawlog_refs)+'}';\r\n                        }\r\n                        Object.keys(obj5.firstEvent.fields).forEach((obj6) => {\r\n                          if(obj2.sessionEventFields.some(theField => theField.toLowerCase().replace(/ /g,\"\") === obj6.toLowerCase().replace(/ /g,\"\"))) {\r\n                          } else{\r\n                            obj2.sessionEventFields.push(obj6.toLowerCase().replace(/ /g,\"\"));\r\n                          }\r\n                        })\r\n                      }                              \r\n                    })\r\n                    tempSessions--               \r\n                    if(tempSessions === 0){\r\n                      this.doneCountEventTypeSessionsDetails++;\r\n                      counter++;\r\n                    }\r\n                    this.dataValidationProgress = Math.round((((this.doneCountEventTypeSessionsDetails/this.todoEventTypeSessionsDetails) * 10) + 80));\r\n                    //console.log('counter: for event type sessions '+counter+' for offset: '+offset);\r\n                     \r\n                    if(tempSessions === 0 && (counter === this.allowedEventTypeSessionCount+1 || this.todoEventTypeSessionsDetails-this.doneCountEventTypeSessionsDetails === 0)) {\r\n                      offset++;\r\n                      if(this.doneCountEventTypeSessionsDetails < tempKeys.length) {\r\n                        this.checkEventTypeSessionDetails(offset);\r\n                      } else {\r\n                        this.checkEventTypeAssetDetails(0);\r\n                      }\r\n                    }\r\n                }).catch(error => {\r\n                  console.log(error);\r\n                  this.errors.push('Error fetching single session event for event type: '+obj2.name);\r\n                  this.errorVisible = true;\r\n                });\r\n              }\r\n            })                                                                                      \r\n        }\r\n      })\r\n    })\r\n    \r\n  }\r\n\r\n  checkEventTypeAssetDetails(offset) {\r\n    var counter = 0;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    var tempAdded = 0;\r\n    this.eventTypes.forEach((obj,index) => {\r\n      if (obj.response.entities.asset != undefined && obj.todoAssetEventIDs.length !== 0) tempKeys.push(obj);\r\n    })\r\n    this.todoEventTypeAssetsDetails = tempKeys.length;\r\n    for (var a=0; a < tempKeys.length && tempAdded <= this.allowedEventTypeSessionCount; a++) {\r\n      //console.log('tempAdded: '+tempAdded);\r\n      if(this.doneEventTypeAssetsDetails.some(event => event.name === tempKeys[a].name)) {\r\n      } else {\r\n        //console.log('pushing '+tempKeys[a].name+' to doneEventTypeSessionsDetails');\r\n        tempArray.push(tempKeys[a]);\r\n        this.doneEventTypeAssetsDetails.push(tempKeys[a]);\r\n        tempAdded++;\r\n      }      \r\n    }\r\n\r\n    tempArray.forEach((obj,index) => {\r\n      this.eventTypes.forEach((obj2, index2) => {\r\n        if(obj.name === obj2.name) {\r\n          var tempSessions = 0;       \r\n          obj2.todoAssetEventIDs.forEach((obj4,index4) => {\r\n            if(obj2.doneAssetEventIDs.some(event => event.sessionId === obj4.sessionId && event.eventId === obj4.eventId)){\r\n            } else {\r\n              obj2.doneAssetEventIDs.push({'sessionId': obj4.sessionId, 'eventId': obj4.eventId});\r\n              tempSessions++\r\n              axios('https://'+this.host+'/uba/api/asset/timeline/events/start?assetId='+obj4.assetId+'&startAssetSequenceId='+obj4.sessionId+'&preferredNumberOfEvents=1&anomalyOnly=false&eventCategories=*&sequenceTypes=asset&eventTypes='+obj2.name+'&eventTypeInclude=true&startEventId='+obj4.eventId, {\r\n                method: 'GET',\r\n                withCredentials: 'include',\r\n              }).then(response => {\r\n                obj2.assetEventDetails.push(response.data);\r\n                  obj2.assetEventDetails.forEach((obj5) => {\r\n                    if(typeof obj5.firstEvent !== 'undefined') {\r\n                      if(typeof obj5.aggregatedEvents[0].es[0].fields.rawlog_refs !== 'undefined') {\r\n                        obj5.firstEvent.fields.rawEventSearch = '{\"rawlog_refs\":'+JSON.stringify(obj5.aggregatedEvents[0].es[0].fields.rawlog_refs)+'}';\r\n                      }\r\n                      Object.keys(obj5.firstEvent.fields).forEach((obj6) => {\r\n                        if(obj2.assetEventFields.some(theField => theField.toLowerCase().replace(/ /g,\"\") === obj6.toLowerCase().replace(/ /g,\"\"))) {\r\n                        } else{\r\n                          obj2.assetEventFields.push(obj6.toLowerCase().replace(/ /g,\"\"));\r\n                          }\r\n                        })\r\n                      }                              \r\n                    })\r\n                    tempSessions--                \r\n                    if(tempSessions === 0){\r\n                      this.doneCountEventTypeAssetsDetails++;\r\n                      counter++;\r\n                    } \r\n                    this.dataValidationProgress = Math.round((((this.doneCountEventTypeAssetsDetails/this.todoEventTypeAssetsDetails) * 10) + 80));\r\n                    //console.log('counter: for event type sessions '+counter+' for offset: '+offset);\r\n                     \r\n                    if(tempSessions === 0 && (counter === this.allowedEventTypeSessionCount+1 || this.todoEventTypeAssetsDetails-this.doneCountEventTypeAssetsDetails === 0)) {\r\n                      offset++;\r\n                      //console.log('counter: '+counter+' === '+this.allowedEventTypeSessionCount+1+'. offset now '+offset);\r\n                      if(this.doneCountEventTypeAssetsDetails < tempKeys.length) {\r\n                        this.checkEventTypeAssetDetails(offset);\r\n                      } else {\r\n                        console.log('Moved on to getRawEvents here');\r\n                        this.getRawEvents(0,0);\r\n                      }\r\n                    }\r\n              }).catch(error => {\r\n                console.log(error);\r\n                this.errors.push('Error fetching single session event for event type: '+obj2.name);\r\n                this.errorVisible = true;\r\n              });\r\n            }                                                                     \r\n          })                        \r\n\r\n        }\r\n      })\r\n    })\r\n    \r\n  }\r\n\r\n  getRawEvents(offset, retryAttempt) {\r\n    console.log('started getRawEvents. offset: ',offset);\r\n    this.retryAttemptRawEventsCount = retryAttempt;\r\n    var counter = 0;\r\n    var tempKeys = []\r\n    var tempArray = [];\r\n    var tempAdded = 0;\r\n    this.eventTypes.forEach((obj) => {\r\n      obj.sessionEventDetails.forEach((obj2) => {\r\n        if(typeof obj2.firstEvent.fields.rawEventSearch !== 'undefined' && obj2.firstEvent.fields.rawEventSearch != null && obj2.firstEvent.fields.rawEventSearch != '') {\r\n          if(tempKeys.some(event => event === obj2.firstEvent.fields.rawEventSearch)) {\r\n          } else {\r\n            tempKeys.push(obj2.firstEvent.fields.rawEventSearch);\r\n          }\r\n          if(typeof obj2.firstEvent.fields.dlEvent !== 'undefined') {\r\n            if(this.doneRawEvents.some(event => event === obj2.firstEvent.fields.rawEventSearch)) {\r\n            } else {\r\n              this.validDoneRawEventsCount++;\r\n              this.doneRawEventsCount++;\r\n              this.doneRawEvents.push(obj2.firstEvent.fields.rawEventSearch);\r\n            } \r\n          }        \r\n        }        \r\n      });\r\n      obj.assetEventDetails.forEach((obj2) => {\r\n        if(typeof obj2.firstEvent.fields.rawEventSearch !== 'undefined' && obj2.firstEvent.fields.rawEventSearch != null && obj2.firstEvent.fields.rawEventSearch != '') {\r\n          if(tempKeys.some(event => event === obj2.firstEvent.fields.rawEventSearch)) {\r\n          } else {\r\n            tempKeys.push(obj2.firstEvent.fields.rawEventSearch);\r\n          }\r\n          if(typeof obj2.firstEvent.fields.dlEvent !== 'undefined') {\r\n            if(this.doneRawEvents.some(event => event === obj2.firstEvent.fields.rawEventSearch)) {\r\n            } else {\r\n              this.validDoneRawEventsCount++;\r\n              this.doneRawEventsCount++;\r\n              this.doneRawEvents.push(obj2.firstEvent.fields.rawEventSearch);\r\n            } \r\n          }\r\n        }        \r\n      });\r\n    });\r\n    this.todoRawEventsCount = tempKeys.length;\r\n    if(this.validDoneRawEventsCount != this.todoRawEventsCount ) this.visibleDataValidationProgress = true; \r\n    \r\n    for (var a=0; a < tempKeys.length && tempAdded <= this.allowedRawEventCount; a++) {\r\n      if(this.doneRawEvents.some(event => event === tempKeys[a])) {\r\n      } else {\r\n        tempArray.push(tempKeys[a]);\r\n        this.doneRawEvents.push(tempKeys[a]);\r\n        tempAdded++;\r\n        console.log('tempAdded updated to ', tempAdded);\r\n      }      \r\n    }\r\n    var templength = this.doneRawEvents.length;\r\n    console.log('this.doneRawEvents.length = ', templength);\r\n    console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n    if(tempArray.length === 0) {\r\n      console.log('tempArray.length === 0, nothing to query');\r\n      if(this.onPreviousSession) {\r\n        this.findRequiredData(this.rulesAndModels)\r\n      } else {\r\n        this.bootstrapEventTypes();\r\n      }\r\n    } \r\n    console.log('setup arrays, tempArray.length = ', tempArray.length);\r\n    if(offset === 0 && retryAttempt === 0){\r\n      console.log('First offset and no retry check');\r\n      console.log('this.todoRawEventsCount = ', this.todoRawEventsCount);\r\n      console.log('this.validDoneRawEventsCount = ', this.validDoneRawEventsCount);\r\n      console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n    }\r\n    //Get raw events from DL all rules if triggered\r\n    tempArray.forEach((obj) => {\r\n      if(obj != undefined) {\r\n        this.activeRawEvents++\r\n        chrome.tabs.sendMessage(this.tabID, {message: \"rawEventSearch\", rawlog_refs: obj}, (response) => {\r\n          if(typeof response[Object.keys(response)[0]] !== 'undefined' && typeof response[Object.keys(response)[0]][0].hits !== 'undefined') {\r\n            this.eventTypes.forEach((obj2) => {\r\n              obj2.sessionEventDetails.forEach((obj3) => {\r\n                if(obj3.firstEvent.fields.rawEventSearch === obj) {\r\n                  obj3.firstEvent.fields.dlEvent = response[Object.keys(response)[0]][0].hits.hits[0]._source;\r\n                }        \r\n              });\r\n              obj2.assetEventDetails.forEach((obj3) => {\r\n                if(obj3.firstEvent.fields.rawEventSearch === obj) {\r\n                  obj3.firstEvent.fields.dlEvent = response[Object.keys(response)[0]][0].hits.hits[0]._source;\r\n                }        \r\n              });\r\n            });\r\n            this.activeEventTypes--\r\n            counter++;\r\n            this.doneRawEventsCount++\r\n            this.validDoneRawEventsCount++\r\n            this.dataValidationProgress = Math.round((((this.doneRawEventsCount/this.todoRawEventsCount) * 10) + 90));\r\n            \r\n            console.log('got a response');\r\n            console.log('counter = ', counter);\r\n            console.log('offset = ', counter);\r\n            console.log('this.todoRawEventsCount = ', this.todoRawEventsCount);\r\n            var templength = this.doneRawEvents.length;\r\n            console.log('this.doneRawEvents.length = ', templength);\r\n            console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n            console.log('this.validDoneRawEventsCount = ', this.validDoneRawEventsCount);\r\n            if(counter === this.allowedRawEventCount+1 || this.todoRawEventsCount-this.doneRawEventsCount === 0) {\r\n              offset++\r\n              if(this.doneRawEventsCount < tempKeys.length) {\r\n                console.log('short, running again');\r\n                this.getRawEvents(offset,this.retryAttemptRawEventsCount);\r\n              } else {\r\n                if(this.doneRawEventsCount === this.validDoneRawEventsCount) {\r\n                  // All raw events successfully queired, moving on to bootstrapEventTypes\r\n                  console.log('All raw events successfully queired, moving on');\r\n                  if(this.onPreviousSession) {\r\n                    this.findRequiredData(this.rulesAndModels)\r\n                  } else {\r\n                    this.bootstrapEventTypes();\r\n                  }\r\n                } else {\r\n                  if(this.retryAttemptRawEventsCount <= 10) {\r\n                    // Some raw events not queired successfully and retry attempt is less than 10, go back back fetch missing raw events\r\n                    console.log('Some raw events not queired successfully and retry attempt is less than 10, go back back fetch missing raw events');\r\n                    console.log('this.retryAttemptRawEventsCount = ', this.retryAttemptRawEventsCount);\r\n                    console.log('this.todoRawEventsCount = ', this.todoRawEventsCount);\r\n                    console.log('this.validDoneRawEventsCount = ', this.validDoneRawEventsCount);\r\n                    console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n                    this.retryAttemptRawEventsCount++;\r\n                    this.doneRawEventsCount = 0;\r\n                    this.rawEventErrors = 0;\r\n                    this.validDoneRawEventsCount = 0;\r\n                    this.doneRawEvents = [];\r\n                    this.getRawEvents(0, this.retryAttemptRawEventsCount);\r\n                  } else {\r\n                    // Some raw events still not queired successfuly, but retry attemps is greater than 10 so we need to move on\r\n                    console.log('Some raw events still not queired successfuly, but retry attemps is greater than 10 so we need to move on');\r\n                    console.log('this.todoRawEventsCount = ', this.todoRawEventsCount);\r\n                    console.log('this.validDoneRawEventsCount = ', this.validDoneRawEventsCount);\r\n                    console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n                    if(this.onPreviousSession) {\r\n                      this.findRequiredData(this.rulesAndModels)\r\n                    } else {\r\n                      this.bootstrapEventTypes();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            this.rawEventErrors++;\r\n            this.errorVisible = true;\r\n            this.activeEventTypes--\r\n            counter++;\r\n            this.doneRawEventsCount++\r\n            this.dataValidationProgress = Math.round((((this.doneRawEventsCount/this.todoRawEventsCount) * 10) + 90));\r\n            this.sleep(5000);\r\n            \r\n            console.log('got a response');\r\n            console.log('counter = ', counter);\r\n            console.log('offset = ', counter);\r\n            console.log('this.todoRawEventsCount = ', this.todoRawEventsCount);\r\n            var templength = this.doneRawEvents.length;\r\n            console.log('this.doneRawEvents.length = ', templength);\r\n            console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n            console.log('this.validDoneRawEventsCount = ', this.validDoneRawEventsCount);\r\n            if(counter === this.allowedRawEventCount+1 || this.todoRawEventsCount-this.doneRawEventsCount === 0) {\r\n              offset++\r\n              if(this.doneRawEventsCount < tempKeys.length) {\r\n                console.log('short, running again');\r\n                this.getRawEvents(offset,this.retryAttemptRawEventsCount);\r\n              } else {\r\n                if(this.doneRawEventsCount === this.validDoneRawEventsCount) {\r\n                  // All raw events successfully queired, moving on to bootstrapEventTypes\r\n                  console.log('All raw events successfully queired, moving on');\r\n                  if(this.onPreviousSession) {\r\n                    this.findRequiredData(this.rulesAndModels)\r\n                  } else {\r\n                    this.bootstrapEventTypes();\r\n                  }\r\n                } else {\r\n                  if(this.retryAttemptRawEventsCount <= 10) {\r\n                    // Some raw events not queired successfully and retry attempt is less than 10, go back back fetch missing raw events\r\n                    console.log('Some raw events not queired successfully and retry attempt is less than 10, go back back fetch missing raw events');\r\n                    console.log('this.retryAttemptRawEventsCount = ', this.retryAttemptRawEventsCount);\r\n                    console.log('this.todoRawEventsCount = ', this.todoRawEventsCount);\r\n                    console.log('this.validDoneRawEventsCount = ', this.validDoneRawEventsCount);\r\n                    console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n                    this.retryAttemptRawEventsCount++;\r\n                    this.doneRawEventsCount = 0;\r\n                    this.rawEventErrors = 0;\r\n                    this.validDoneRawEventsCount = 0;\r\n                    this.doneRawEvents = [];\r\n                    this.getRawEvents(0, this.retryAttemptRawEventsCount);\r\n                  } else {\r\n                    // Some raw events still not queired successfuly, but retry attemps is greater than 3 so we need to move on\r\n                    console.log('Some raw events still not queired successfuly, but retry attemps is greater than 3 so we need to move on');\r\n                    console.log('this.todoRawEventsCount = ', this.todoRawEventsCount);\r\n                    console.log('this.validDoneRawEventsCount = ', this.validDoneRawEventsCount);\r\n                    console.log('this.doneRawEventsCount = ', this.doneRawEventsCount);\r\n                    if(this.onPreviousSession) {\r\n                      this.findRequiredData(this.rulesAndModels)\r\n                    } else {\r\n                      this.bootstrapEventTypes();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          \r\n          \r\n        });\r\n      }     \r\n    });\r\n    \r\n      \r\n  }\r\n\r\n  bootstrapEventTypes(){\r\n    this.eventTypes.forEach((obj2, index2) => {\r\n      obj2.totalCount = 0;\r\n      obj2.rules = [];\r\n      obj2.models = [];   \r\n      obj2.assetEventIDs = [];\r\n      obj2.requiredEventFields = [];\r\n      obj2.presentEventFields = [];\r\n      obj2.missingEventFields = [];\r\n      obj2.missingEventFieldTable = [];\r\n      obj2.fieldsPopulating = 0;\r\n      obj2.fieldsPopulatingPercent = 0;\r\n      obj2.modelsPopulating = 0;\r\n      obj2.modelsPopulatingPercent = 0;\r\n      obj2.rulesCouldTrigger = 0;\r\n      obj2.rulesCouldTriggerPercent = 0;\r\n      obj2.uniqueUsersList = [];\r\n      obj2.uniqueHostsList = [];\r\n      obj2.uniqueIPsList = [];\r\n      obj2.uniqueUsers = 0;\r\n      obj2.uniqueHosts = 0;\r\n      obj2.uniqueIPs = 0;\r\n      if(obj2.response.entities.session != undefined) {\r\n        obj2.response.entities.session.forEach((obj3,index3) => {\r\n          if(!obj3.sessionInfo.username.endsWith('$')) {                  \r\n            if(obj2.uniqueUsersList.some(user => user.name === obj3.sessionInfo.username.toLowerCase())) {\r\n            } else {\r\n              obj2.uniqueUsers = obj2.uniqueUsers + 1;\r\n              obj2.uniqueUsersList.push({'name':obj3.sessionInfo.username.toLowerCase()});\r\n            }\r\n            if(this.summary.uniqueUsers.some(user => user.name === obj3.sessionInfo.username.toLowerCase())) {\r\n            } else {\r\n              this.summary.uniqueUsers.push({'name':obj3.sessionInfo.username.toLowerCase()});\r\n              this.summary.uniqueUserCount = this.summary.uniqueUserCount + 1;\r\n            }\r\n          }\r\n        })\r\n      }\r\n      if(obj2.response.entities.asset != undefined) {\r\n        obj2.response.entities.asset.forEach((obj3,index3) => {\r\n          if(!((obj3.assetSequenceInfo.assetId.match(/\\d\\./g) || []).length === 3)) {\r\n            if(!((obj3.assetSequenceInfo.assetId.match(/\\:/g) || []).length >= 1)) {                \r\n              if(obj2.uniqueHostsList.some(user => user.name === obj3.assetSequenceInfo.assetId.toLowerCase())) {\r\n              } else {\r\n                obj2.uniqueHosts = obj2.uniqueHosts + 1;\r\n                obj2.uniqueHostsList.push({'name':obj3.assetSequenceInfo.assetId.toLowerCase()});\r\n              }\r\n              if(this.summary.uniqueHosts.some(user => user.name === obj3.assetSequenceInfo.assetId.toLowerCase())) {\r\n              } else {\r\n                this.summary.uniqueHosts.push({'name':obj3.assetSequenceInfo.assetId.toLowerCase()});\r\n                this.summary.uniqueHostCount = this.summary.uniqueHostCount + 1;\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n      if(obj2.response.entities.lockout != undefined) {\r\n        obj2.response.entities.lockout.forEach((obj3,index3) => {\r\n          if(!obj3.lockoutInfo.username.endsWith('$')) {                  \r\n            if(obj2.uniqueUsersList.some(user => user.name === obj3.lockoutInfo.username.toLowerCase())) {\r\n            } else {\r\n              obj2.uniqueUsers = obj2.uniqueUsers + 1;\r\n              obj2.uniqueUsersList.push({'name':obj3.lockoutInfo.username.toLowerCase()});\r\n            }\r\n            if(this.summary.uniqueUsers.some(user => user.name === obj3.lockoutInfo.username.toLowerCase())) {\r\n            } else {\r\n              this.summary.uniqueUsers.push({'name':obj3.lockoutInfo.username.toLowerCase()});\r\n              this.summary.uniqueUserCount = this.summary.uniqueUserCount + 1;\r\n            }\r\n          }\r\n        })\r\n      }\r\n      obj2.sequenceTypes = [];\r\n      Object.keys(obj2.response.entities).forEach((obj3,index3) => {\r\n        if(obj3 != 'session' && obj3 != 'asset' && obj3 != 'lockout') obj2.sequenceTypes.push(obj3);\r\n      })\r\n      obj2.sequenceTypes.forEach((obj3,index3) => {\r\n        obj2.response.entities[obj3].forEach((obj4,index4) => {\r\n          if(!obj4.dataFeedInfo.username.endsWith('$')) {                  \r\n            if(obj2.uniqueUsersList.some(user => user.name === obj4.dataFeedInfo.username.toLowerCase())) {\r\n            } else {\r\n              obj2.uniqueUsers = obj2.uniqueUsers + 1;\r\n              obj2.uniqueUsersList.push({'name':obj4.dataFeedInfo.username.toLowerCase()});\r\n            }\r\n            if(this.summary.uniqueUsers.some(user => user.name === obj4.dataFeedInfo.username.toLowerCase())) {\r\n            } else {\r\n              this.summary.uniqueUsers.push({'name':obj4.dataFeedInfo.username.toLowerCase()});\r\n              this.summary.uniqueUserCount = this.summary.uniqueUserCount + 1;\r\n            }\r\n          }\r\n        })\r\n      })\r\n      if (obj2.response.entities.endpoint != undefined) {\r\n        obj2.inEndpoint = true;\r\n        obj2.endpointCount = obj2.response.entities.endpoint.length;\r\n        obj2.totalCount = obj2.totalCount + obj2.response.entities.endpoint.length;\r\n      } \r\n      if (obj2.response.entities.file != undefined) {\r\n        obj2.inFile = true;\r\n        obj2.fileCount = obj2.response.entities.file.length;\r\n        obj2.totalCount = obj2.totalCount + obj2.response.entities.file.length;\r\n      } \r\n      if (obj2.response.entities.web != undefined) {\r\n        obj2.inWeb = true;\r\n        obj2.webCount = obj2.response.entities.web.length;\r\n        obj2.totalCount = obj2.totalCount + obj2.response.entities.web.length;\r\n      } \r\n      if (obj2.response.entities.database != undefined) {\r\n        obj2.inDatabase = true;\r\n        obj2.databaseCount = obj2.response.entities.database.length;\r\n        obj2.totalCount = obj2.totalCount + obj2.response.entities.database.length;\r\n      } \r\n      if (obj2.response.entities.lockout != undefined) {\r\n        obj2.inLockout = true;\r\n        obj2.lockoutCount = obj2.response.entities.lockout.length;\r\n        obj2.totalCount = obj2.totalCount + obj2.response.entities.lockout.length;\r\n      }     \r\n      if (Object.keys(obj2.response.entities).length != 0) {  \r\n        obj2.populating = true;\r\n      } else {\r\n        obj2.populating = false;\r\n      }             \r\n    })\r\n     \r\n    this.checkFeature();\r\n  }\r\n\r\n\r\n  checkFeature(){\r\n    this.rulesAndModels.forEach((obj,index) => {\r\n      if(obj.modelDef != undefined) { \r\n        obj.featurePresent = 'false';\r\n      } else {\r\n        obj.featurePresent = 'N/A';\r\n      }     \r\n      this.eventTypes.forEach((obj2,index2) => {\r\n        obj2.uniqueUserPercent = Math.round((obj2.uniqueUsers / this.summary.uniqueUserCount) * 100);\r\n        obj2.uniqueHostPercent = Math.round((obj2.uniqueHosts / this.summary.uniqueHostCount) * 100);       \r\n        if(obj.ruleDef.requiredEvents.some(type => type === obj2.name)) {\r\n          if(obj.modelDef != undefined) {            \r\n            if(obj.modelDef.modelType === 'NUMERICAL_TIME_OF_WEEK') obj.featurePresent = 'true';\r\n            if(obj.populating === 'true') obj.featurePresent = 'true';\r\n            if(obj2.inSession) {\r\n              obj2.sessionEventFields.forEach((obj3,index) => {\r\n                obj.modelDef.requiredEventFields.forEach((obj4,index) => {\r\n                  if(obj3 === obj4) {\r\n                    if(obj.modelDef.presentEventFields.some(field => field === obj4)) {\r\n                    } else {\r\n                      obj.modelDef.presentEventFields.push(obj3);\r\n                    }\r\n                  } \r\n                  if(obj.modelDef.requiredEventFields.length === obj.modelDef.presentEventFields.length) obj.featurePresent = 'true';\r\n                })\r\n              })\r\n            }\r\n            if(obj2.inAsset) {\r\n              obj2.assetEventFields.forEach((obj3,index) => {\r\n                obj.modelDef.requiredEventFields.forEach((obj4,index) => {\r\n                  if(obj3 === obj4) {\r\n                    if(obj.modelDef.presentEventFields.some(field => field === obj4)) {\r\n                    } else {\r\n                      obj.modelDef.presentEventFields.push(obj3);\r\n                    }\r\n                  }\r\n                  if(obj.modelDef.requiredEventFields.length === obj.modelDef.presentEventFields.length) obj.featurePresent = 'true';\r\n                })\r\n              })\r\n            }\r\n            \r\n          }\r\n        }\r\n      })\r\n      \r\n    })\r\n    this.checkMissingEvents();\r\n    \r\n    \r\n  }\r\n\r\n  checkMissingEvents() {\r\n    this.rulesAndModels.forEach((obj,index) => {\r\n      this.eventTypes.forEach((obj2,index2) => {\r\n        if(obj.ruleDef.requiredEvents.some(type => type === obj2.name)) {\r\n          if(obj.modelDef != undefined) {\r\n            obj.modelDef.requiredEventFields.forEach((obj3,index) => {\r\n              if(obj.modelDef.presentEventFields.some(field => field === obj3)) {\r\n              } else{\r\n                if(obj.modelDef.missingEventFields.some(field => field === obj3)) {\r\n                } else {\r\n                  obj.modelDef.missingEventFields.push(obj3);\r\n                }\r\n              }\r\n              \r\n            })\r\n          }\r\n        }\r\n      })\r\n      \r\n    })\r\n    \r\n    this.addEventDetails();\r\n\r\n  }\r\n\r\n\r\n  addEventDetails() {\r\n    var doneCount = 0;\r\n    this.rulesAndModels.forEach((obj,index) => {\r\n      obj.eventInRuleType = 'false';\r\n      obj.presentEventTypes = [];\r\n      this.eventTypes.forEach((obj2, index2) => {\r\n        if(obj.ruleDef.requiredEvents.some(types => types === obj2.name)) {\r\n          obj2.rules.push(obj.ruleDef);\r\n          if(obj.modelDef != undefined) {\r\n            obj2.models.push(obj.modelDef);\r\n            if(obj.modelDef.populating) obj.ruleDef.modelPopulating = true;\r\n          } \r\n          if(obj2.sessionCount != undefined) {\r\n            obj.inSessions = 'true';\r\n            if(obj.ruleDef.ruleType === 'session') {\r\n              obj.presentEventTypes.push(obj2.name);\r\n              obj.eventInRuleType = 'true';\r\n            } \r\n          } else {\r\n            obj.inSessions = 'false';\r\n          }\r\n          if(obj2.assetCount != undefined) {\r\n            obj.inAssets = 'true';\r\n            if(obj.ruleDef.ruleType === 'asset') {\r\n              obj.presentEventTypes.push(obj2.name);\r\n              obj.eventInRuleType = 'true';\r\n            }\r\n          } else {\r\n            obj.inAssets = 'false';\r\n          }\r\n          if(obj2.endpointCount != undefined) {\r\n            obj.inEndpoints = 'true';\r\n            if(obj.ruleDef.ruleType === 'endpoint') {\r\n              obj.presentEventTypes.push(obj2.name);\r\n              obj.eventInRuleType = 'true';\r\n            }\r\n          } else {\r\n            obj.inEndpoints = 'false';\r\n          }\r\n          if(obj2.fileCount != undefined) {\r\n            obj.inFiles = 'true';\r\n            if(obj.ruleDef.ruleType === 'file') {\r\n              obj.presentEventTypes.push(obj2.name);\r\n              obj.eventInRuleType = 'true';\r\n            }\r\n          } else {\r\n            obj.inFiles = 'false';\r\n          }\r\n          if(obj2.webCount != undefined) {\r\n            obj.inWebs = 'true';\r\n            if(obj.ruleDef.ruleType === 'web') {\r\n              obj.presentEventTypes.push(obj2.name);\r\n              obj.eventInRuleType = 'true';\r\n            }\r\n          } else {\r\n            obj.inWebs = 'false';\r\n          }\r\n          if(obj2.databaseCount != undefined) {\r\n            obj.inDatabase = 'true';\r\n            if(obj.ruleDef.ruleType === 'database') {\r\n              obj.presentEventTypes.push(obj2.name);\r\n              obj.eventInRuleType = 'true';\r\n            }\r\n          } else {\r\n            obj.inDatabase = 'false';\r\n          }\r\n          if(obj2.lockoutCount != undefined) {\r\n            obj.inLockouts = 'true';\r\n            if(obj.ruleDef.ruleType === 'account-lockout') {\r\n              obj.presentEventTypes.push(obj2.name);\r\n              obj.eventInRuleType = 'true';\r\n            }\r\n          } else {\r\n            obj.inLockouts = 'false';\r\n          }\r\n          obj2.ruleCount = obj2.rules.length;\r\n          obj2.modelCount = obj2.models.length;\r\n          //console.log('still in loop');\r\n        }\r\n      })\r\n      doneCount = doneCount + 1;\r\n      if(doneCount === this.rulesAndModels.length) {      \r\n        this.rulesAndModelsDone = this.rulesAndModels;\r\n         \r\n        this.columns6 = [\r\n          { field: 'ruleCat', header: 'Rule Category' },\r\n          { field: 'ruleId', header: 'Rule ID' },\r\n          { field: 'ruleName', header: 'Rule Name' },\r\n          { field: 'modelName', header: 'Model' },\r\n          { field: 'eventInRuleType', header: 'Events Present' },\r\n          { field: 'populating', header: 'Model Populating' },\r\n          { field: 'hasTriggered', header: 'Has Triggered' }\r\n        ];\r\n      } \r\n    })\r\n    this.eventTypes.forEach((obj2, index2) => {\r\n      obj2.models.forEach((obj3, index2) => {\r\n        if(obj3.populating) {\r\n          obj2.modelsPopulating = obj2.modelsPopulating + 1;\r\n          obj2.modelsPopulatingPercent = Math.round((obj2.modelsPopulating / obj2.modelCount) * 100);\r\n          obj2.missingEventFieldTable.forEach((obj5, index5) => {\r\n              obj5.percent = Math.round((obj5.count / (obj2.modelCount - obj2.modelsPopulating))*100);\r\n          })      \r\n        } else {         \r\n          obj3.missingEventFields.forEach((obj4, index2) => {\r\n            if(obj2.missingEventFieldTable.length == 0) {\r\n              if(obj3.modelType != 'NUMERICAL_TIME_OF_WEEK') obj2.missingEventFieldTable.push({'name': obj4, 'count': 1, 'percent': Math.round((1 / (obj2.modelCount - obj2.modelsPopulating))*100)});\r\n            } else {\r\n              if(obj2.missingEventFieldTable.some(field => field.name === obj4)) {\r\n                obj2.missingEventFieldTable.forEach((obj5, index5) => {\r\n                  if(obj5.name === obj4 && obj3.modelType != 'NUMERICAL_TIME_OF_WEEK') {\r\n                    obj5.count = obj5.count + 1;\r\n                    obj5.percent = Math.round((obj5.count / (obj2.modelCount - obj2.modelsPopulating))*100);\r\n                  }\r\n                })\r\n              } else {\r\n                if(obj3.modelType != 'NUMERICAL_TIME_OF_WEEK') obj2.missingEventFieldTable.push({'name': obj4, 'count': 1, 'percent': Math.round((1 / (obj2.modelCount - obj2.modelsPopulating))*100)});\r\n              }\r\n            }\r\n            if(obj2.missingEventFields.some(field => field === obj4)) {\r\n            } else {\r\n              if(obj3.modelType != 'NUMERICAL_TIME_OF_WEEK') obj2.missingEventFields.push(obj4);\r\n            }          \r\n          })          \r\n        }\r\n        obj3.requiredEventFields.forEach((obj4, index2) => {\r\n          if(obj2.requiredEventFields.some(field => field === obj4)) {\r\n          } else {\r\n            obj2.requiredEventFields.push(obj4);\r\n          }          \r\n        })\r\n        if(obj2.inSession) {\r\n          obj2.sessionEventFields.forEach((obj4,index4) => {\r\n            obj3.requiredEventFields.forEach((obj5,index5) => {\r\n              if(obj4 === obj5) {\r\n                if(obj2.presentEventFields.some(field => field === obj4)) {\r\n                } else {\r\n                  obj2.presentEventFields.push(obj4);\r\n                }\r\n              } \r\n            })\r\n          })\r\n        }\r\n        if(obj2.inAsset) {\r\n          obj2.assetEventFields.forEach((obj4,index) => {\r\n            obj3.requiredEventFields.forEach((obj5,index) => {\r\n              if(obj4 === obj5) {\r\n                if(obj2.presentEventFields.some(field => field === obj4)) {\r\n                } else {\r\n                  obj2.presentEventFields.push(obj4);\r\n                }\r\n              }\r\n            })\r\n          })\r\n        }\r\n        obj2.fieldCount = obj2.requiredEventFields.length;\r\n        obj2.fieldsPopulating = obj2.presentEventFields.length;\r\n        obj2.fieldsPopulatingPercent = Math.round((obj2.presentEventFields.length / obj2.requiredEventFields.length) * 100); \r\n      })\r\n      obj2.rules.forEach((obj3, index2) => {\r\n        if(obj3.modelPopulating) {\r\n          obj2.rulesCouldTrigger = obj2.rulesCouldTrigger + 1;\r\n          obj2.rulesCouldTriggerPercent = Math.round((obj2.rulesCouldTrigger / obj2.ruleCount) * 100);\r\n        } \r\n      })\r\n    })\r\n    this.determineSources(this.eventTypes);\r\n    \r\n  }\r\n\r\n  determineSources(eventTypes) {\r\n    this.sources = [];\r\n    eventTypes.forEach((obj) => {\r\n      obj.sessionEventDetails.forEach((obj2) => {\r\n        if(this.sources.some(source => source.source === obj2.firstEvent.fields.source && source.name === obj2.firstEvent.fields.event_type)) {} else {\r\n          this.sources.push({'source': obj2.firstEvent.fields.source, 'name': obj2.firstEvent.fields.event_type, 'inSession': false, 'inAsset': false, 'sessionEvents': [], 'assetEvents': [], 'models': obj.models, 'rules': obj.rules})\r\n        }\r\n      })\r\n      obj.assetEventDetails.forEach((obj2) => {\r\n        if(this.sources.some(source => source.source === obj2.firstEvent.fields.source && source.name === obj2.firstEvent.fields.event_type)) {} else {\r\n          this.sources.push({'source': obj2.firstEvent.fields.source, 'name': obj2.firstEvent.fields.event_type, 'inSession': false, 'inAsset': false, 'sessionEvents': [], 'assetEvents': [], 'models': obj.models, 'rules': obj.rules})\r\n        }\r\n      })\r\n      obj.sessionEventDetails.forEach((obj2) => {\r\n        this.sources.forEach((obj3) => {\r\n          if(obj3.source === obj2.firstEvent.fields.source && obj3.name === obj2.firstEvent.fields.event_type) {\r\n            obj3.sessionEvents.push(obj2.firstEvent.fields);\r\n            obj3.inSession = true;\r\n          }\r\n        })\r\n      })\r\n      obj.assetEventDetails.forEach((obj2) => {\r\n        this.sources.forEach((obj3) => {\r\n          if(obj3.source === obj2.firstEvent.fields.source && obj3.name === obj2.firstEvent.fields.event_type) {\r\n            obj3.assetEvents.push(obj2.firstEvent.fields);\r\n            obj3.inAsset = true;\r\n          }\r\n        })\r\n      })     \r\n    })\r\n    console.log('data validation done');\r\n    this.loading = false;\r\n    this.visibleDataValidationProgress = false;\r\n    this.storeValidationSession();\r\n    \r\n  }\r\n\r\n  exportExcel(table) {\r\n    import(\"xlsx\").then(xlsx => {\r\n        const worksheet = xlsx.utils.json_to_sheet(table);\r\n        const workbook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };\r\n        const excelBuffer = xlsx.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n        this.saveAsExcelFile(excelBuffer, \"TableExport\");\r\n    });\r\n  }\r\n\r\n  saveAsExcelFile(buffer, fileName) {\r\n      import(\"file-saver\").then(FileSaver => {\r\n          let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n          let EXCEL_EXTENSION = '.xlsx';\r\n          const data = new Blob([buffer], {\r\n              type: EXCEL_TYPE\r\n          });\r\n          FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\r\n      });\r\n  }\r\n\r\n  onEventTypesSelect(required,present) {\r\n    this.selectedRequiredEventTypes = required;\r\n    this.selectedPresentEventTypes = present;\r\n    this.visibleMissingEventTypes = true;\r\n    \r\n  }\r\n  \r\n  onEventFieldsSelect(sessionEventFields,assetEventFields, missingTable) {\r\n    //this.selectedRequiredEventFields = required;\r\n    //this.selectedPresentEventFields = present;\r\n    //this.selectedMissingEventFields = missing;\r\n    sessionEventFields = sessionEventFields.sort();\r\n    assetEventFields = assetEventFields.sort();\r\n    this.selectedSessionEventFields = sessionEventFields;\r\n    this.selectedAssetEventFields = assetEventFields;\r\n    this.selectedMissingEventFieldTable = missingTable;\r\n    this.visibleMissingEventFields = true;\r\n    \r\n  }\r\n\r\n  onRuleSelect(rule) {\r\n    this.selectedRule = rule;\r\n    this.visibleRule = true;\r\n    \r\n  }\r\n\r\n  onModelSelect(model) {\r\n    this.selectedModel = model;\r\n    this.visibleModel = true;\r\n    \r\n  }\r\n\r\n  onUsersSelect(users) {\r\n    users = users.sort();\r\n    this.selectedUserList = users;\r\n    this.visibleUserList = true;\r\n    \r\n  }\r\n\r\n  onHostsSelect(hosts) {\r\n    hosts = hosts.sort();\r\n    this.selectedHostList = hosts;\r\n    this.visibleHostList = true;\r\n    \r\n  }\r\n\r\n  onServerSelect(){\r\n    this.visibleServer = true;\r\n    \r\n  }\r\n}\r\n\r\nconst HomeView = observer(() => {\r\n      <>\r\n      <div className=\"row\">\r\n        {this.showHome && this.showRuleTuning ?       \r\n        <div>\r\n          <div className=\"col-12\" >\r\n          <h2>Load Previous Tuning Session</h2>\r\n\r\n\r\n          </div>\r\n          \r\n        </div>\r\n          : false\r\n        }\r\n        {this.showHome && this.showpDataValidation ?\r\n          <div className=\"col-12\" >\r\n              <h2>Load Previous Data Validation Session</h2>\r\n              \r\n          </div>\r\n        :false}\r\n        {this.showHome ?\r\n        <div>\r\n          <div className=\"col-6\">\r\n            <h2>New Rule Tuning Session</h2>\r\n            <div className=\"form-group\">\r\n                <label for=\"input1\"><b>Previous days to query</b> </label>\r\n                <InputText value={this.queryUnitNum} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label for=\"input3\"><b>Risk Score Greater Than</b> </label>\r\n                <InputText value={this.queryRiskScore} onChange={(e) => this.queryRiskScore= e.target.value} />\r\n            </div>\r\n            <Button label=\"Get User Sessions\" onClick={() => this.getNotables('session')} /> <br></br>\r\n            <Button label=\"Get Asset Sessions\" onClick={() => this.getNotables('asset')} /> <br></br>\r\n          </div>\r\n          <div className=\"col-6\">\r\n              <h2>New Data Validation Session (BETA)</h2>\r\n              <div className=\"form-group\">\r\n                  <label for=\"input1\"><b>Previous days to query</b> </label>\r\n                  <InputText value={this.queryUnitNum} />\r\n              </div>\r\n              <Button label=\"Start Data Validation\" onClick={() => this.startValidation()} /> <br></br>\r\n          </div>\r\n        </div>\r\n        :false}\r\n      </div>\r\n      \r\n      </>\r\n})\r\n  \r\n  export default NewSession;","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-4-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-4-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\",\n      function () {\n        content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-4-1!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport NewSession from './NewSession'\nimport HomeView from './NewSession';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <HomeView />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAGA;;;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AApBA;AAqBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;AAEA;AAmdA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAYA;AAVA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAOA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AADA;AAYA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AA7sEA;AACA;AA8saA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAdA;AAAA;AAAA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAAA;AAAA;AADA;AA+CA;AAhDA;AAkDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAAA;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}
{"version":3,"sources":["../../src/FileSaver.js"],"names":[],"mappings":"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","file":"static/js/5.7dc8e1db.chunk.js","sourcesContent":["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"sourceRoot":""}